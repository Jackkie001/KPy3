# -*- coding: utf-8 -*-
from LineAPI.linepy import *
from LineAPI.akad.ttypes import Message                                                                                                                                             
from LineAPI.akad.ttypes import ContentType as Type
from multiprocessing import Pool, Process
from gtts import gTTS
from time import sleep
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from googletrans import Translator
from humanfriendly import format_timespan, format_size, format_number, format_length
import time, random, sys, json, codecs, threading, glob, re, string, os, requests, subprocess, six, ast, pytz, urllib.request, urllib.parse, urllib.error, urllib.parse

#==============================================================================#
botStart = time.time()
#==============================================================================#
line = LINE() #qr
#line = LINE('') #Token
line.log("Auth Token : " + str(line.authToken))
line.log("Timeline Token : " + str(line.tl.channelAccessToken))

#ki = LINE() #qr
#ki = LINE('') #Token
#ki.log("Auth Token : " + str(ki.authToken))
#ki.log("Timeline Token : " + str(ki.tl.channelAccessToken))

#kk = LINE() #qr
#kk = LINE('') #Token
#kk.log("Auth Token : " + str(kk.authToken))
#kk.log("Timeline Token : " + str(kk.tl.channelAccessToken))

#kc = LINE() #qr
#kc = LINE('') #Token
#kc.log("Auth Token : " + str(kc.authToken))
#kc.log("Timeline Token : " + str(kc.tl.channelAccessToken))

#ke = LINE() #qr
#ke = LINE('') Token
#ke.log("Auth Token : " + str(ke.authToken))
#ke.log("Timeline Token : " + str(ke.tl.channelAccessToken))

print ("‚ïî‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ä∞‚ç£‚úø‚úØ„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë‚úØ‚úø‚ç£‚ä±‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïó\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà \n‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñì‚ñà‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà \n‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñì‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñì‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñì‚ï¨‚ñì‚ï¨‚ï¨‚ñì‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñì‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ï¨‚ñì‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ñì‚ñì‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ñì‚ñì‚ï¨‚ñì‚ñì‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñì‚ñì‚ñì‚ï¨‚ñì‚ñà‚ñà‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñà‚ñà‚ñì‚ñì‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ï¨‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ„Äê‚ú•LOGIN SELFBOT COMPLETE‚ú•„Äë‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù")
print ("Login Succes")

lineMID = line.profile.mid
lineProfile = line.getProfile()
lineSettings = line.getSettings()

#kiMID = ki.profile.mid
#kiProfile = ki.getProfile()
#kiSettings = ki.getSettings()

#kkMID = kk.profile.mid
#kkProfile = kk.getProfile()
#kkSettings = kk.getSettings()

#kcMID = kc.profile.mid
#kcProfile = kc.getProfile()
#kcSettings = kc.getSettings()

#keMID = kc.profile.mid
#keProfile = kc.getProfile()
#keSettings = kc.getSettings()


#oepoll = OEPoll(ke)
#oepoll = OEPoll(kc)
#oepoll = OEPoll(kk)
#oepoll = OEPoll(ki)
oepoll = OEPoll(line)
readOpen = codecs.open("read.json","r","utf-8")
settingsOpen = codecs.open("temp.json","r","utf-8")
read = json.load(readOpen)
settings = json.load(settingsOpen)
Rfu = [line]
lineMID = line.getProfile().mid
#kiMID = ki.getProfile().mid
#kkMID = kk.getProfile().mid
#kcMID = kc.getProfile().mid
#kcMID = ke.getProfile().mid
bot1 = line.getProfile().mid
RfuBot=[lineMID]
Family=["u39b98d8a2032c9bb289f583811a2b941",lineMID]
admin=['u39b98d8a2032c9bb289f583811a2b941',lineMID]
RfuFamily = RfuBot + Family

protectname = []
protecturl = []
protection = []
autocancel = {}
autoinvite = []
autoleaveroom = []
targets = []
#==============================================================================#
settings = {
    "autoAdd": False,
    "autoBlock":True,
    "autoJoin": False,
    'autoCancel':{"on":True,"members":3},	
    "autoLeave": False,
    "autoRead": False,
    "leaveRoom": False,
    "detectMention": False,
    "detectMention2": False,
    "detectMention3": False,
    "checkSticker": False,
    "kickMention": False,
    "potoMention": True,
    "lang":"JP",
    "Wc": False,
    "Lv": False,
    "blacklist":{},
    "winvite": False,
    "wblacklist": False,
    "dblacklist": False,
    "commentBlack":{},
    "wblack": False,
    "dblack": False,
    "clock": False,
    "cName":"",
    "cNames":"",
    "invite": {},
    "winvite": False,
    "pnharfbot": {},
    "pname": {},
    "pro_name": {},
    "message":"Thanks for add me",
    "comment":"Thanks for add me",
    "Respontag":"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
    "tag1":"‡πÅ‡∏ó‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î..‡πÄ‡∏î‡πà‡∏∞‡∏õ‡∏±‡πä‡∏î‡πÇ‡∏ö‡∏Å‡∏Å..üò§üò§",
    "tag2":"\n‡∏°‡∏µ‡πÑ‡∏£‡∏Å‡πá‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏¥‡∏Ñ‡∏±‡∏ö",
    "tag3":"‡πÄ‡∏´‡∏á‡∏≤‡∏ä‡πâ‡∏∞.üòÖüòÖ",
    "welcome":"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
    "bye":"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
    "userAgent": [
        "Mozilla/5.0 (X11; U; Linux i586; de; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (X11; U; Linux amd64; rv:5.0) Gecko/20100101 Firefox/5.0 (Debian)",
        "Mozilla/5.0 (X11; U; Linux amd64; en-US; rv:5.0) Gecko/20110619 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 FirePHP/0.5",
        "Mozilla/5.0 (X11; Linux x86_64; rv:5.0) Gecko/20100101 Firefox/5.0 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux x86_64) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; Linux ppc; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (X11; Linux AMD64) Gecko Firefox/5.0",
        "Mozilla/5.0 (X11; FreeBSD amd64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20110619 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1; rv:6.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 6.1.1; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.2; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.1; U; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.1; rv:2.0.1) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.0; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0",
        "Mozilla/5.0 (Windows NT 5.0; rv:5.0) Gecko/20100101 Firefox/5.0"
    ],
    "mimic": {
        "copy": False,
        "status": False,
        "target": {}
    }
}

RfuProtect = {
    "protect": True,
    "cancelprotect": False,
    "inviteprotect": False,
    "linkprotect": False,
    "Protectguest": False,
    "Protectjoin": False,
    "autoAdd": False,
}

Setmain = {
    "foto": {},
}

read = {
    "readPoint": {},
    "readMember": {},
    "readTime": {},
    "ROM": {}
}

myProfile = {
	"displayName": "",
	"statusMessage": "",
	"pictureStatus": ""
}

mimic = {
    "copy":False,
    "copy2":False,
    "status":False,
    "target":{}
    }
    
RfuCctv={
    "cyduk":{},
    "point":{},
    "sidermem":{}
}

rfuSet = {
    'setTime':{},
    'ricoinvite':{},
    }

setTime = {}
setTime = rfuSet['setTime']

contact = line.getProfile() 
backup = line.getProfile() 
backup.dispalyName = contact.displayName 
backup.statusMessage = contact.statusMessage
backup.pictureStatus = contact.pictureStatus

#contact = ki.getProfile() 
#backup = ki.getProfile() 
#backup.dispalyName = contact.displayName 
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = kk.getProfile() 
#backup = kk.getProfile() 
#backup.dispalyName  = contact.displayName 
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = kc.getProfile() 
#backup = kc.getProfile() 
#backup.dispalyName = contact.displayName 
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

#contact = ke.getProfile() 
#backup = ke.getProfile() 
#backup.dispalyName = contact.displayName 
#backup.statusMessage = contact.statusMessage
#backup.pictureStatus = contact.pictureStatus

mulai = time.time() 
dangerMessage = ["cleanse","group cleansed.","mulai",".winebot",".kickall","mayhem","kick on","makasih :d","!kickall","nuke","‡∏ö‡∏¥‡∏ô",".???","‡∏á‡∏á‡πÑ‡∏õ‡∏î‡∏¥","‡∏ö‡∏¥‡∏ô‡πÑ‡∏õ‡∏î‡∏¥","‡πÄ‡∏ã‡∏•‡∏Å‡∏≤‡∏Å‡∏à‡∏±‡∏á",".‡∏ö‡∏¥‡∏ô"]

myProfile["displayName"] = lineProfile.displayName
myProfile["statusMessage"] = lineProfile.statusMessage
myProfile["pictureStatus"] = lineProfile.pictureStatus
#==============================================================================#
#==============================================================================#
def summon(to, nama):
    aa = ""
    bb = ""
    strt = int(14)
    akh = int(14)
    nm = nama
    for mm in nm:
      akh = akh + 2
      aa += """{"S":"""+json.dumps(str(strt))+""","E":"""+json.dumps(str(akh))+""","M":"""+json.dumps(mm)+"},"""
      strt = strt + 6
      akh = akh + 4
      bb += "\xe2\x95\xa0 @x \n"
    aa = (aa[:int(len(aa)-1)])
    msg = Message()
    msg.to = to
    msg.text = "\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\n"+bb+"\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90"
    msg.contentMetadata ={'MENTION':'{"MENTIONEES":['+aa+']}','EMTVER':'4'}
    print ("TAG ALL")
    try:
       line.sendMessage(msg)
    except Exception as error:
       print(error)

def restartBot():
    print ("RESTART SERVER")
    time.sleep(3)
    python = sys.executable
    os.execl(python, python, *sys.argv)
    
def logError(text):
    line.log("[ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ] " + str(text))
    time_ = datetime.now()
    with open("errorLog.txt","a") as error:
        error.write("\n[%s] %s" % (str(time), text))

def sendMessage(to, text, contentMetadata={}, contentType=0):
    mes = Message()
    mes.to, mes.from_ = to, profile.mid
    mes.text = text
    mes.contentType, mes.contentMetadata = contentType, contentMetadata
    if to not in messageReq:
        messageReq[to] = -1
    messageReq[to] += 1
        
def sendMessageWithMention(to, lineMID):
    try:
        aa = '{"S":"0","E":"3","M":'+json.dumps(lineMID)+'}'
        text_ = '@x '
        line.sendMessage(to, text_, contentMetadata={'MENTION':'{"MENTIONEES":['+aa+']}'}, contentType=0)
    except Exception as error:
        logError(error)
 
def myhelp():
    myHelp = "‚ïî‚ç£‚ä∞„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë‚ä±‚ç£‚ïó"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏¥‡∏Å„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMe„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏£‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ï‡∏±‡∏™‡πÄ‡∏£‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏î‡∏¥‡∏™‡πÄ‡∏£‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏õ‡∏Å‡πÄ‡∏£‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏ó @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÑ‡∏≠‡∏î‡∏µ @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ä‡∏∑‡πà‡∏≠ @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ï‡∏±‡∏™ @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏î‡∏¥‡∏™ @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏õ‡∏Å @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äåcopy @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMimic on/off„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMimicList„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMimicAdd„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMimicDel„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåSp„Äç "+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏£‡∏µ‡∏ö‡∏π‡∏ó„Äç "+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏≠‡∏≠‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÅ‡∏ó‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÑ‡∏≠‡∏î‡∏µ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏Å‡∏•‡∏∏‡πà‡∏°„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏£‡∏π‡∏õ‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î/‡∏•‡∏¥‡πâ‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ö‡πâ‡∏≤‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏≠‡∏±‡∏û‡∏ä‡∏∑‡πà‡∏≠:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏≠‡∏±‡∏û‡∏ï‡∏±‡∏™:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåSpam on/off„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåReject inv„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåAllban„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏ä‡∏Ñ‡∏î‡∏≥„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äåcb=‡∏•‡πâ‡∏≤‡∏á‡∏î‡∏≥„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ö‡∏•‡πá‡∏≠‡∏Ñ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåInvite„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå\leave„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏û‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏¢„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÅ‡∏°‡πà‡∏á‡∏ï‡∏≤‡∏¢„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåInstagram„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåFotoig„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåYoutube„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåMusic„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåLyric„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåScreenshootWebsite„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåFilm:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåKalender„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåCheckDate„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåWikipedia„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåUrban„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ç‡∏≠‡∏£‡∏π‡∏õ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK1 @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK2 @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK3 @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK4 @„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK1 invite„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK2 inv„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK3 vit„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏Ñ‡∏¥‡∏Å‡πÅ‡∏ó‡∏Ñ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK1gruplist„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK2listgrup„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåK3listrom„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåCleanse„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåScan blacklist„Äçt"+ "\n" + \
                  "‚ï†‚ç£‚å≤„ÄåClear„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î/‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ó./‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ó.„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤/‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πä‡∏≠‡∏Ñ/‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πä‡∏≠‡∏Ñ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å/‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô/‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ1/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ1„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ3/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ3„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏Ñ‡∏¥‡∏Å/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏Ñ‡∏¥‡∏Å„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö/‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å/‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å:„Äç"+ "\n" + \
                  "‚ï†‚ç£‚å≤„Äå‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏Å/‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏Å„Äç"+ "\n" + \
                  "‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚ä∞‚úø€û‚úø‚ä±‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù"
    return myHelp

def listgrup():
    listGrup = "‚ï≠‚ïê‚ïê‚ïê‚ïêHelpGroup " + "\n" + \
                  "‚ïëGroupCreator" + "\n" + \
                  "‚ïëGroupId" + "\n" + \
                  "‚ïëGroupName" + "\n" + \
                  "‚ïëGroupPicture" + "\n" + \
                  "‚ïëGroupList" + "\n" + \
                  "‚ïëGroupMemberList" + "\n" + \
                  "‚ïëGroupInfo" + "\n" + \
                  "‚ïëUrl" + "\n" + \
                  "‚ïëLink on/off" + "\n" + \
                  "‚ïëGurl" + "\n" + \
                  "‚ïëFriendlist" + "\n" + \
                  "‚ïëBlocklist" + "\n" + \
                  "‚ïëFriendlist mid" + "\n" + \
                  "‚ïëInvite:gcreator" + "\n" + \
                  "‚ïëSpam on/off" + "\n" + \
                  "‚ïëReject inv" + "\n" + \
                  "‚ïëAllban" + "\n" + \
                  "‚ïëGrouplist" + "\n" + \
                  "‚ïëBlist" + "\n" + \
                  "‚ïëMention" + "\n" + \
                  "‚ïëLurking on" + "\n" + \
                  "‚ïëLurking off" + "\n" + \
                  "‚ïëLurking reset" + "\n" + \
                  "‚ïëLurking" + "\n" + \
                  "‚ïëInvite" + "\n" + \
                  "‚ïëuninstall" + "\n" + \
                  "‚ïëKick" + "\n" + \
                  "‚ïëBan:on" + "\n" + \
                  "‚ïëUnban:on" + "\n" + \
                  "‚ï∞‚ïê‚ïê‚ïê‚ïê"
    return listGrup

def socmedia():
    socMedia = "‚ï≠‚ïê‚ïê‚ïê‚ïêHelpMedia " + "\n" + \
                  "‚ïëInstagram" + "\n" + \
                  "‚ïëFotoig" + "\n" + \
                  "‚ïëYoutube" + "\n" + \
                  "‚ïëMusic" + "\n" + \
                  "‚ïëLyric" + "\n" + \
                  "‚ïëScreenshootWebsite" + "\n" + \
                  "‚ïëFilm:" + "\n" + \
                  "‚ïëKalender" + "\n" + \
                  "‚ïëCheckDate" + "\n" + \
                  "‚ïëTextig" + "\n" + \
                  "‚ïëWikipedia" + "\n" + \
                  "‚ïëUrban" + "\n" + \
                  "‚ïëAnime" + "\n" + \
                  "‚ïëImage" + "\n" + \
                  "‚ïëPornhub" + "\n" + \
                  "‚ï∞‚ïê‚ïê‚ïê‚ïê"
    return socMedia
    
def helpset():
    helpSet = "‚ï≠‚ïê‚ïê‚ïê‚ïêHelpMySet " + "\n" + \
    "‚ïë·¥ç è s·¥á ü“ì" + "\n" + \
    "‚ïës·¥è·¥Ñ·¥ç·¥á·¥Ö…™·¥Ä" + "\n" + \
    "‚ïë ü…™s·¥õ …¢ Ä·¥ú·¥ò" + "\n" + \
    "‚ïë ü…™s·¥õ ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ" + "\n" + \
    "‚ïë ü…™s·¥õ ·¥ã…™·¥Ñ·¥ã·¥á Ä" + "\n" + \
    "‚ïës·¥õ·¥Ä·¥õ·¥ús" + "\n" + \
    "‚ïë·¥õ·¥áx·¥õ·¥õ·¥ès·¥ò·¥á·¥á·¥Ñ ú" + "\n" + \
    "‚ïë ü…™s·¥õ ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á" + "\n" + \
    "‚ï∞‚ïê‚ïê‚ïê‚ïê"
    return helpSet 

def helpkicker():
    helpKicker = "‚ï≠‚ïê‚ïê‚ïê‚ïê‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏¥‡∏Å " + "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏ó‡∏™" + "\n" + \
    "‚ï†‚ç£‚å≤ Bot" + "\n" + \
    "‚ï†‚ç£‚å≤ K1 @" + "\n" + \
    "‚ï†‚ç£‚å≤ K2 @" + "\n" + \
    "‚ï†‚ç£‚å≤ K3 @" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K4 @"+ "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K1 invite" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K2 inv" + "\n" + \
    "‚ï†‚ç£‚å≤ K3 vit" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è ‡∏Ñ‡∏¥‡∏Å‡πÅ‡∏ó‡∏Ñ" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K1gruplist" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K2listgrup" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è K3listrom" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è Cleanse" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è Scan blacklist" + "\n" + \
    "‚ï†‚ç£‚å≤Ô∏è cb" + "\n" + \
    "‚ï†‚ç£‚å≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏Å:" + "\n" + \
    "‚ï†‚ç£‚å≤ ‡∏ï‡∏±‡∏™‡∏Ñ‡∏¥‡∏Å:" + "\n" + \
    "‚ï∞‚ïê‚ïê‚ïê‚ïê"
    return helpKicker
    
def helpsetting():
    helpSetting = "‚ï≠‚ïê‚ïê‚ïê‚ïê‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ " + "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î/‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤/‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î/‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å/‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô/‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2/‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ:"+ "\n" + \
    "‚ï†‚ç£‚å≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏Å/‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡∏Å"+ "\n" + \
    "‚ï∞‚ïê‚ïê‚ïê‚ïê"
    return helpSetting

def helptexttospeech():
    helpTextToSpeech =   "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                         "‚ï†„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë" + "\n" + \
                         "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ" + "\n" + \
                         "‚îÄ‚îÄ‚îÄ‚îÄ‚îÖ‚ïê‡¶á€ù‡§à‚ïê‚îÖ‚îÄ‚îÄ‚îÄ‚îÄ" + "\n" + \
                         "           ú·¥á ü·¥ò ·¥õ·¥áx·¥õ·¥õ·¥ès·¥ò·¥á·¥á·¥Ñ ú" + "\n" + \
                         "‚îÄ‚îÄ‚îÄ‚îÄ‚îÖ‚ïê‡¶á€ù‡§à‚ïê‚îÖ‚îÄ‚îÄ‚îÄ‚îÄ" + "\n" + \
                         "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                         "‚ï†‚ùÇ af : Afrikaans" + "\n" + \
                         "‚ï†‚ùÇ sq : Albanian" + "\n" + \
                         "‚ï†‚ùÇ ar : Arabic" + "\n" + \
                         "‚ï†‚ùÇ hy : Armenian" + "\n" + \
                         "‚ï†‚ùÇ bn : Bengali" + "\n" + \
                         "‚ï†‚ùÇ ca : Catalan" + "\n" + \
                         "‚ï†‚ùÇ zh : Chinese" + "\n" + \
                         "‚ï†‚ùÇ zh-cn : Chinese (Mandarin/China)" + "\n" + \
                         "‚ï†‚ùÇ zh-tw : Chinese (Mandarin/Taiwan)" + "\n" + \
                         "‚ï†‚ùÇ zh-yue : Chinese (Cantonese)" + "\n" + \
                         "‚ï†‚ùÇ hr : Croatian" + "\n" + \
                         "‚ï†‚ùÇ cs : Czech" + "\n" + \
                         "‚ï†‚ùÇ da : Danish" + "\n" + \
                         "‚ï†‚ùÇ nl : Dutch" + "\n" + \
                         "‚ï†‚ùÇ en : English" + "\n" + \
                         "‚ï†‚ùÇ en-au : English (Australia)" + "\n" + \
                         "‚ï†‚ùÇ en-uk : English (United Kingdom)" + "\n" + \
                         "‚ï†‚ùÇ en-us : English (United States)" + "\n" + \
                         "‚ï†‚ùÇ eo : Esperanto" + "\n" + \
                         "‚ï†‚ùÇ fi : Finnish" + "\n" + \
                         "‚ï†‚ùÇ fr : French" + "\n" + \
                         "‚ï†‚ùÇ de : German" + "\n" + \
                         "‚ï†‚ùÇ el : Greek" + "\n" + \
                         "‚ï†‚ùÇ hi : Hindi" + "\n" + \
                         "‚ï†‚ùÇ hu : Hungarian" + "\n" + \
                         "‚ï†‚ùÇ is : Icelandic" + "\n" + \
                         "‚ï†‚ùÇ id : Indonesian" + "\n" + \
                         "‚ï†‚ùÇ it : Italian" + "\n" + \
                         "‚ï†‚ùÇ ja : Japanese" + "\n" + \
                         "‚ï†‚ùÇ km : Khmer (Cambodian)" + "\n" + \
                         "‚ï†‚ùÇ ko : Korean" + "\n" + \
                         "‚ï†‚ùÇ la : Latin" + "\n" + \
                         "‚ï†‚ùÇ lv : Latvian" + "\n" + \
                         "‚ï†‚ùÇ mk : Macedonian" + "\n" + \
                         "‚ï†‚ùÇ no : Norwegian" + "\n" + \
                         "‚ï†‚ùÇ pl : Polish" + "\n" + \
                         "‚ï†‚ùÇ pt : Portuguese" + "\n" + \
                         "‚ï†‚ùÇ ro : Romanian" + "\n" + \
                         "‚ï†‚ùÇ ru : Russian" + "\n" + \
                         "‚ï†‚ùÇ sr : Serbian" + "\n" + \
                         "‚ï†‚ùÇ si : Sinhala" + "\n" + \
                         "‚ï†‚ùÇ sk : Slovak" + "\n" + \
                         "‚ï†‚ùÇ es : Spanish" + "\n" + \
                         "‚ï†‚ùÇ es-es : Spanish (Spain)" + "\n" + \
                         "‚ï†‚ùÇ es-us : Spanish (United States)" + "\n" + \
                         "‚ï†‚ùÇ sw : Swahili" + "\n" + \
                         "‚ï†‚ùÇ sv : Swedish" + "\n" + \
                         "‚ï†‚ùÇ ta : Tamil" + "\n" + \
                         "‚ï†‚ùÇ th : Thai" + "\n" + \
                         "‚ï†‚ùÇ tr : Turkish" + "\n" + \
                         "‚ï†‚ùÇ uk : Ukrainian" + "\n" + \
                         "‚ï†‚ùÇ vi : Vietnamese" + "\n" + \
                         "‚ï†‚ùÇ cy : Welsh" + "\n" + \
                         "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ" + "\n" + "\n\n" + \
                          "„ÄåContoh : say-id Pengen Anu„Äç"
    return helpTextToSpeech
    
def helplanguange():
    helpLanguange =    "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                       "‚ï†„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë" + "\n" + \
                       "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ" + "\n" + \
                       "‚îÄ‚îÄ‚îÄ‚îÄ‚îÖ‚ïê‡¶á€ù‡§à‚ïê‚îÖ‚îÄ‚îÄ‚îÄ‚îÄ" + "\n" + \
                       "           ú·¥á ü·¥ò ·¥õ Ä·¥Ä…¥s ü·¥Ä·¥õ·¥á" + "\n" + \
                       "‚îÄ‚îÄ‚îÄ‚îÄ‚îÖ‚ïê‡¶á€ù‡§à‚ïê‚îÖ‚îÄ‚îÄ‚îÄ‚îÄ" + "\n" + \
                       "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì" + "\n" + \
                       "‚ï†‚ùÇ af : afrikaans" + "\n" + \
                       "‚ï†‚ùÇ sq : albanian" + "\n" + \
                       "‚ï†‚ùÇ am : amharic" + "\n" + \
                       "‚ï†‚ùÇ ar : arabic" + "\n" + \
                       "‚ï†‚ùÇ hy : armenian" + "\n" + \
                       "‚ï†‚ùÇ az : azerbaijani" + "\n" + \
                       "‚ï†‚ùÇ eu : basque" + "\n" + \
                       "‚ï†‚ùÇ be : belarusian" + "\n" + \
                       "‚ï†‚ùÇ bn : bengali" + "\n" + \
                       "‚ï†‚ùÇ bs : bosnian" + "\n" + \
                       "‚ï†‚ùÇ bg : bulgarian" + "\n" + \
                       "‚ï†‚ùÇ ca : catalan" + "\n" + \
                       "‚ï†‚ùÇ ceb : cebuano" + "\n" + \
                       "‚ï†‚ùÇ ny : chichewa" + "\n" + \
                       "‚ï†‚ùÇ zh-cn : chinese (simplified)" + "\n" + \
                       "‚ï†‚ùÇ zh-tw : chinese (traditional)" + "\n" + \
                       "‚ï†‚ùÇ co : corsican" + "\n" + \
                       "‚ï†‚ùÇ hr : croatian" + "\n" + \
                       "‚ï†‚ùÇ cs : czech" + "\n" + \
                       "‚ï†‚ùÇ da : danish" + "\n" + \
                       "‚ï†‚ùÇ nl : dutch" + "\n" + \
                       "‚ï†‚ùÇ en : english" + "\n" + \
                       "‚ï†‚ùÇ eo : esperanto" + "\n" + \
                       "‚ï†‚ùÇ et : estonian" + "\n" + \
                       "‚ï†‚ùÇ tl : filipino" + "\n" + \
                       "‚ï†‚ùÇ fi : finnish" + "\n" + \
                       "‚ï†‚ùÇ fr : french" + "\n" + \
                       "‚ï†‚ùÇ fy : frisian" + "\n" + \
                       "‚ï†‚ùÇ gl : galician" + "\n" + \
                       "‚ï†‚ùÇ ka : georgian" + "\n" + \
                       "‚ï†‚ùÇ de : german" + "\n" + \
                       "‚ï†‚ùÇ el : greek" + "\n" + \
                       "‚ï†‚ùÇ gu : gujarati" + "\n" + \
                       "‚ï†‚ùÇ ht : haitian creole" + "\n" + \
                       "‚ï†‚ùÇ ha : hausa" + "\n" + \
                       "‚ï†‚ùÇ haw : hawaiian" + "\n" + \
                       "‚ï†‚ùÇ iw : hebrew" + "\n" + \
                       "‚ï†‚ùÇ hi : hindi" + "\n" + \
                       "‚ï†‚ùÇ hmn : hmong" + "\n" + \
                       "‚ï†‚ùÇ hu : hungarian" + "\n" + \
                       "‚ï†‚ùÇ is : icelandic" + "\n" + \
                       "‚ï†‚ùÇ ig : igbo" + "\n" + \
                       "‚ï†‚ùÇ id : indonesian" + "\n" + \
                       "‚ï†‚ùÇ ga : irish" + "\n" + \
                       "‚ï†‚ùÇ it : italian" + "\n" + \
                       "‚ï†‚ùÇ ja : japanese" + "\n" + \
                       "‚ï†‚ùÇ jw : javanese" + "\n" + \
                       "‚ï†‚ùÇ kn : kannada" + "\n" + \
                       "‚ï†‚ùÇ kk : kazakh" + "\n" + \
                       "‚ï†‚ùÇ km : khmer" + "\n" + \
                       "‚ï†‚ùÇ ko : korean" + "\n" + \
                       "‚ï†‚ùÇ ku : kurdish (kurmanji)" + "\n" + \
                       "‚ï†‚ùÇ ky : kyrgyz" + "\n" + \
                       "‚ï†‚ùÇ lo : lao" + "\n" + \
                       "‚ï†‚ùÇ la : latin" + "\n" + \
                       "‚ï†‚ùÇ lv : latvian" + "\n" + \
                       "‚ï†‚ùÇ lt : lithuanian" + "\n" + \
                       "‚ï†‚ùÇ lb : luxembourgish" + "\n" + \
                       "‚ï†‚ùÇ mk : macedonian" + "\n" + \
                       "‚ï†‚ùÇ mg : malagasy" + "\n" + \
                       "‚ï†‚ùÇ ms : malay" + "\n" + \
                       "‚ï†‚ùÇ ml : malayalam" + "\n" + \
                       "‚ï†‚ùÇ mt : maltese" + "\n" + \
                       "‚ï†‚ùÇ mi : maori" + "\n" + \
                       "‚ï†‚ùÇ mr : marathi" + "\n" + \
                       "‚ï†‚ùÇ mn : mongolian" + "\n" + \
                       "‚ï†‚ùÇ my : myanmar (burmese)" + "\n" + \
                       "‚ï†‚ùÇ ne : nepali" + "\n" + \
                       "‚ï†‚ùÇ no : norwegian" + "\n" + \
                       "‚ï†‚ùÇ ps : pashto" + "\n" + \
                       "‚ï†‚ùÇ fa : persian" + "\n" + \
                       "‚ï†‚ùÇ pl : polish" + "\n" + \
                       "‚ï†‚ùÇ pt : portuguese" + "\n" + \
                       "‚ï†‚ùÇ pa : punjabi" + "\n" + \
                       "‚ï†‚ùÇ ro : romanian" + "\n" + \
                       "‚ï†‚ùÇ ru : russian" + "\n" + \
                       "‚ï†‚ùÇ sm : samoan" + "\n" + \
                       "‚ï†‚ùÇ gd : scots gaelic" + "\n" + \
                       "‚ï†‚ùÇ sr : serbian" + "\n" + \
                       "‚ï†‚ùÇ st : sesotho" + "\n" + \
                       "‚ï†‚ùÇ sn : shona" + "\n" + \
                       "‚ï†‚ùÇ sd : sindhi" + "\n" + \
                       "‚ï†‚ùÇ si : sinhala" + "\n" + \
                       "‚ï†‚ùÇ sk : slovak" + "\n" + \
                       "‚ï†‚ùÇ sl : slovenian" + "\n" + \
                       "‚ï†‚ùÇ so : somali" + "\n" + \
                       "‚ï†‚ùÇ es : spanish" + "\n" + \
                       "‚ï†‚ùÇ su : sundanese" + "\n" + \
                       "‚ï†‚ùÇ sw : swahili" + "\n" + \
                       "‚ï†‚ùÇ sv : swedish" + "\n" + \
                       "‚ï†‚ùÇ tg : tajik" + "\n" + \
                       "‚ï†‚ùÇ ta : tamil" + "\n" + \
                       "‚ï†‚ùÇ te : telugu" + "\n" + \
                       "‚ï†‚ùÇ th : thai" + "\n" + \
                       "‚ï†‚ùÇ tr : turkish" + "\n" + \
                       "‚ï†‚ùÇ uk : ukrainian" + "\n" + \
                       "‚ï†‚ùÇ ur : urdu" + "\n" + \
                       "‚ï†‚ùÇ uz : uzbek" + "\n" + \
                       "‚ï†‚ùÇ vi : vietnamese" + "\n" + \
                       "‚ï†‚ùÇ cy : welsh" + "\n" + \
                       "‚ï†‚ùÇ xh : xhosa" + "\n" + \
                       "‚ï†‚ùÇ yi : yiddish" + "\n" + \
                       "‚ï†‚ùÇ yo : yoruba" + "\n" + \
                       "‚ï†‚ùÇ zu : zulu" + "\n" + \
                       "‚ï†‚ùÇ fil : Filipino" + "\n" + \
                       "‚ï†‚ùÇ he : Hebrew" + "\n" + \
                       "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ" + "\n" + "\n\n" + \
                       "„ÄåContoh : tr-id Pengen Anu„Äç"
    return helpLanguange
#==============================================================================#
def lineBot(op):
    try:
        if op.type == 0:
            return
            
        if op.type == 5:
            if settings["autoAdd"] == True:
            	line.findAndAddContactsByMid(op.param1)

        if op.type == 5:
            if settings["autoBlock"] == True:
                line.blockContact(op.param1)
                ki.blockContact(op.param1)
                kk.blockContact(op.param1)
                ke.blockContact(op.param1)
                
        if op.type == 13:
            if lineMID in op.param3:
                G = line.getGroup(op.param1)
                if settings["autoJoin"] == True:
                    if settings["autoCancel"]["on"] == True:
                        if len(G.members) <= settings["autoCancel"]["members"]:
                            line.rejectGroupInvitation(op.param1)
                        else:
                            line.acceptGroupInvitation(op.param1)
                    else:
                        line.acceptGroupInvitation(op.param1)
                elif settings["autoCancel"]["on"] == True:
                    if len(G.members) <= settings["autoCancel"]["members"]:
                        line.rejectGroupInvitation(op.param1)
            else:
                Inviter = op.param3.replace("",',')
                InviterX = Inviter.split(",")
                matched_list = []
                for tag in settings["blacklist"]:
                    matched_list+=[str for str in InviterX if str == tag]
                if matched_list == []:
                    pass
                else:
                    line.cancelGroupInvitation(op.param1, matched_list)				
#        if op.type == 13:
#            group = line.getGroup(op.param1)
#            if settings["autoJoin"] == True:
#                line.acceptGroupInvitation(op.param1)
#        if op.type == 24:
#            if settings["autoLeave"] == True:
#                line.leaveRoom(op.param1)
        if op.type == 25:
            msg = op.message
            text = msg.text
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            if msg.toType == 0:
                if sender != line.profile.mid:
                    to = sender
                else:
                    to = receiver
            else:
                to = receiver
            if msg.contentType == 0:
                if text is None:
                    return   
#==============================================================================#
                if text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á':
                    myHelp = myhelp()
                    line.sendMessage(to, str(myHelp))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á3':
                    helpSet = helpset()
                    line.sendMessage(to, str(helpSet))
                    sendMessageWithMention(to, lineMID)
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏¥‡∏Å':
                    helpKicker = helpkicker()
                    line.sendMessage(to, str(helpKicker))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á2':
                    listGrup = listgrup()
                    line.sendMessage(to, str(listGrup))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤':
                    helpSetting = helpsetting()
                    line.sendMessage(to, str(helpSetting))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á4':
                    socMedia = socmedia()
                    line.sendMessage(to, str(socMedia))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á5':
                    helpTextToSpeech = helptexttospeech()
                    line.sendMessage(to, str(helpTextToSpeech))
                elif text.lower() == '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á6':
                    helpLanguange = helplanguange()
                    line.sendMessage(to, str(helpLanguange))
                
#==============================================================================#
                elif text.lower() == 'speed':
                    start = time.time()
                    line.sendMessage(to, "œÅ‚Ñì—îŒ±¬¢—î œâŒ±Œπ—ÇŒπ–∏g")
                    line.sendMessage(to, "BY‚ç£‚å≤„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë")
                    elapsed_time = time.time() - start
                    line.sendMessage(msg.to, "‚ïî‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚úø‚úØ€û‚úØ‚úø‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïó\n‚ç£‚å≤‚Ä¢ [ SPEED SERVER COMPLETE ]\n‚ç£‚å≤‚Ä¢ [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó]: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå\n‚ç£‚å≤‚Ä¢ [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏ó‡∏ò‡∏¥]:%sseconds \n ‚ç£‚å≤‚Ä¢ [" % (elapsed_time) + str(int(round((time.time() - start) * 1000)))+"ms]\n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚úø‚úØ€û‚úØ‚úø‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù")
                elif text.lower() == 'sp':
                    line.sendMessage(to, "BY‚ç£‚å≤„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë")
                    start = time.time()
                    time.sleep(0.0001)
                    elapsed_time = time.time() - start
                    line.sendMessage(msg.to, "‚ïî‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚úø‚úØ€û‚úØ‚úø‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïó\n‚ç£‚å≤‚Ä¢ [ SPEED SELFBOT COMPLETE ]\n‚ç£‚å≤‚Ä¢ [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó]: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏•‡∏ö‡∏≠‡∏ó\n‚ç£‚å≤‚Ä¢ [‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏∏‡∏ó‡∏ò‡∏¥]: %sseconds \n ‚ç£‚å≤‚Ä¢ [" % (elapsed_time) + str(int(round((time.time() - start) * 1000)))+"ms] \n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚úø‚úØ€û‚úØ‚úø‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù")
                elif text.lower() == '‡∏£‡∏µ‡∏ö‡∏≠‡∏ó':
                    line.sendMessage(to, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà ... ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ..")
                    line.sendMessage(to, "Success Restarting.")
                    restartBot()
                elif text.lower() == '‡∏≠‡∏≠‡∏ô':
                    timeNow = time.time()
                    runtime = timeNow - botStart
                    runtime = format_timespan(runtime)
                    line.sendMessage(to, "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó {}".format(str(runtime)))
                elif text.lower() == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':
                    try:
                        arr = []
                        owner = "u39b98d8a2032c9bb289f583811a2b941"
                        creator = line.getContact(owner)
                        contact = line.getContact(lineMID)
                        grouplist = line.getGroupIdsJoined()
                        contactlist = line.getAllContactIds()
                        blockedlist = line.getBlockedContactIds()
                        ret_ = "‚ïî‚ç£‚ä∞„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë‚ä±‚ç£‚ïó"
                        ret_ += "\n‚ï†‚ç£‚å≤ ‡∏ä‡∏∑‡πà‡∏≠ ‚ïê {}".format(contact.displayName)
                        ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚ïê {}".format(str(len(grouplist)))
                        ret_ += "\n‚ï†‚ç£‚å≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‚ïê {}".format(str(len(contactlist)))
                        ret_ += "\n‚ï†‚ç£‚å≤ ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ ‚ïê {}".format(str(len(blockedlist)))
                        ret_ += "\n‚ï†‚ïê‚ïê[‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞]"
                        ret_ += "\n‚ï† [‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á] ‚ïê {}".format(creator.displayName)
                        ret_ += "\n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚ä∞‚úø€û‚úø‚ä±‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù"
                        line.sendContact(to, owner)
                        line.sendMessage(to, str(ret_))
                    except Exception as e:
                        line.sendMessage(msg.to, str(e))
#==============================================================================#
                elif text.lower() == '‡πÄ‡∏ä‡∏Ñ‡∏Ñ‡πà‡∏≤':
                    try:
                        ret_ = "        „Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë\n‚ïî‚îÖ‚ç£‚ä∞‚úø„Äê‚ú•‚ç£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚ç£‚ú•„Äë‚úø‚ä±‚ç£‚îÖ‚ïó"
                        if settings["autoAdd"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["autoBlock"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πä‡∏≠‡∏Ñ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πä‡∏≠‡∏Ñ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["autoJoin"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["autoCancel"]["on"] == True:ret_+="\n‚ï†‚ç£‚å≤ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ ‚ç£‚û¢ " + str(settings["autoCancel"]["members"]) + "‡∏Ñ‡∏ô ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‡∏Å‡∏•‡∏∏‡πà‡∏° ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"						
                        if settings["autoLeave"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["autoRead"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ä‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"				
                        if settings["checkSticker"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏Ñ‡πä‡∏î‡∏™‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["kickMention"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ó‡∏Ñ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≤‡∏°‡πÅ‡∏ó‡∏Ñ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["detectMention"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà1 ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà1 ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["detectMention2"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà2 ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà2 ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["detectMention3"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà3 ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà3 ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if settings["potoMention"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"						
                        if RfuProtect["inviteprotect"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÄ‡∏ä‡∏¥‡∏ç ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if RfuProtect["cancelprotect"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if RfuProtect["protect"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if RfuProtect["linkprotect"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if RfuProtect["Protectguest"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        if RfuProtect["Protectjoin"] == True: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° ‚ç£‚û¢ ‡πÄ‡∏õ‡∏¥‡∏î ‚úî"
                        else: ret_ += "\n‚ï†‚ç£‚å≤ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° ‚ç£‚û¢ ‡∏õ‡∏¥‡∏î ‚ùå"
                        ret_ += "\n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚ä∞‚úø€û‚úø‚ä±‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù"
                        line.sendMessage(to, str(ret_))
                    except Exception as e:
                        line.sendMessage(msg.to, str(e))
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î':
                    settings["autoAdd"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏î':
                    settings["autoAdd"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πä‡∏≠‡∏Ñ':
                    settings["autoBlock"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πä‡∏≠‡∏Ñ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πä‡∏≠‡∏Ñ':
                    settings["autoBlock"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡∏ö‡∏•‡πä‡∏≠‡∏Ñ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤':
                    settings["autoJoin"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤':
                    settings["autoJoin"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif "Gcancel:" in msg.text:
                    try:
                        strnum = msg.text.replace("Gcancel:","")
                        if strnum == "off":
                                settings["autoCancel"]["on"] = False
                                if settings["lang"] == "JP":
                                    line.sendText(msg.to,"Invitation refused turned off\nTo turn on please specify the number of people and send")
                                else:
                                    line.sendText(msg.to,"ÂÖ≥‰∫ÜÈÇÄËØ∑ÊãíÁªù„ÄÇË¶ÅÊó∂ÂºÄËØ∑ÊåáÂÆö‰∫∫Êï∞ÂèëÈÄÅ")
                        else:
                                num =  int(strnum)
                                settings["autoCancel"]["on"] = True
                                if settings["lang"] == "JP":
                                    line.sendText(msg.to,strnum + " ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏∞‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
                                else:
                                    line.sendText(msg.to,strnum + "‰Ωø‰∫∫‰ª•‰∏ãÁöÑÂ∞èÁªÑÁî®Ëá™Âä®ÈÇÄËØ∑ÊãíÁªù")
                    except:
                        if settings["lang"] == "JP":
                                line.sendText(msg.to,"Value is wrong")
                        else:
                                line.sendText(msg.to,"Bizarre ratings")					
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å':
                    settings["autoLeave"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å':
                    settings["autoLeave"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡∏Å‡πÅ‡∏ä‡∏ó‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô':
                    settings["autoRead"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ó.':
                    settings["contact"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ó.':
                    settings["contact"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô':
                    settings["autoRead"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡πä‡∏Å':
                    settings["checkSticker"] = True
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡πä‡∏ä‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏ï‡∏¥‡πä‡∏Å':
                    settings["checkSticker"] = False
                    line.sendMessage(to, "„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏Ñ‡πä‡∏ä‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")
                elif msg.text.lower() == ".gift":
                    msg.contentType = 9
                    msg.contentMetadata={'PRDID': '',
                                        'PRDTYPE': 'THEME',
                                        'MSGTPL': '1'}
                    msg.text = None
                    line.sendMessage(msg)
                elif "‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ " in msg.text.lower():
                    red = re.compile(re.escape('‡πÄ‡∏£‡∏≤‡πÉ‡∏´‡πâ '),re.IGNORECASE)
                    themeid = red.sub('',msg.text)
                    msg.contentType = 9
                    msg.contentMetadata={'PRDID': themeid,
                                        'PRDTYPE': 'THEME',
                                        'MSGTPL': '1'}
                    msg.text = None
                    line.sendMessage(msg)                    
#==============================================================================#
                elif text.lower() == 'me':
                    sendMessageWithMention(to, lineMID)
                    line.sendContact(to, lineMID)
                elif text.lower() == '‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á':
                    sendMessageWithMention(to, lineMID)
                    line.sendContact(to, "u39b98d8a2032c9bb289f583811a2b941")
                elif text.lower() == '‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏£‡∏≤':
                    line.sendMessage(msg.to,"[‡πÑ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤]\n" +  lineMID)
                elif text.lower() == '‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤':
                    me = line.getContact(lineMID)
                    line.sendMessage(msg.to,"[‡∏ô‡∏≤‡∏°‡∏Å‡∏π]\n" + me.displayName)
                elif text.lower() == '‡∏ï‡∏±‡∏™‡πÄ‡∏£‡∏≤':
                    me = line.getContact(lineMID)
                    line.sendMessage(msg.to,"[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß]\n" + me.statusMessage)
                elif text.lower() == '‡∏î‡∏¥‡∏™‡πÄ‡∏£‡∏≤':
                    me = line.getContact(lineMID)
                    line.sendImageWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus)
                elif text.lower() == 'myvideo':
                    me = line.getContact(lineMID)
                    line.sendVideoWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus + "/vp")
                elif text.lower() == '‡∏õ‡∏Å‡πÄ‡∏£‡∏≤':
                    me = line.getContact(lineMID)
                    cover = line.getProfileCoverURL(lineMID)    
                    line.sendImageWithURL(msg.to, cover)
                elif msg.text.lower().startswith("‡∏Ñ‡∏ó "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            mi_d = contact.mid
                            line.sendContact(msg.to, mi_d)
                elif msg.text.lower().startswith("‡πÑ‡∏≠‡∏î‡∏µ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        ret_ = "[ Mid User ]"
                        for ls in lists:
                            ret_ += "\n{}" + ls
                        line.sendMessage(msg.to, str(ret_))
                elif msg.text.lower().startswith("‡∏ä‡∏∑‡πà‡∏≠ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, "[ ‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏∑‡πà‡∏≠ ]\n" + contact.displayName)
                elif msg.text.lower().startswith("‡∏ï‡∏±‡∏™ "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            contact = line.getContact(ls)
                            line.sendMessage(msg.to, "[ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ]\n{}" + contact.statusMessage)
                elif msg.text.lower().startswith("‡∏î‡∏µ‡∏™ "):
                    if 'MENTION' in msg.contentMetadata.keys()!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            path = "http://dl.profile.line.naver.jp/" + line.getContact(ls).pictureStatus
                            line.sendImageWithURL(msg.to, str(path))
                elif msg.text.lower().startswith("video "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        lists = []
                        for mention in mentionees:
                            if mention["M"] not in lists:
                                lists.append(mention["M"])
                        for ls in lists:
                            path = "http://dl.profile.line.naver.jp/" + line.getContact(ls).pictureStatus + "/vp"
                            line.sendImageWithURL(msg.to, str(path))
                elif msg.text.lower().startswith("‡∏õ‡∏Å "):
                    if line != None:
                        if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                            names = re.findall(r'@(\w+)', text)
                            mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                            mentionees = mention['MENTIONEES']
                            lists = []
                            for mention in mentionees:
                                if mention["M"] not in lists:
                                    lists.append(mention["M"])
                            for ls in lists:
                                path = line.getProfileCoverURL(ls)
                                line.sendImageWithURL(msg.to, str(path))
                elif msg.text.lower().startswith("copy "):
                    if 'MENTION' in list(msg.contentMetadata.keys())!= None:
                        names = re.findall(r'@(\w+)', text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            contact = mention["M"]
                            break
                        try:
                            line.cloneContactProfile(contact)
                            line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡πá‡∏≠‡∏õ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                        except:
                            line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡πá‡∏≠‡∏õ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                            
                elif text.lower() == '‡∏Ñ‡∏∑‡∏ô‡∏£‡πà‡∏≤‡∏á':
                    try:
                        lineProfile.displayName = str(myProfile["displayName"])
                        lineProfile.statusMessage = str(myProfile["statusMessage"])
                        lineProfile.pictureStatus = str(myProfile["pictureStatus"])
                        line.updateProfileAttribute(8, lineProfile.pictureStatus)
                        line.updateProfile(lineProfile)
                        line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡∏•‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                    except:
                        line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡∏•‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
						
#==============================================================================#
                

  
                elif msg.text.lower().startswith("mimicadd "):
                    targets = []
                    key = eval(msg.contentMetadata["MENTION"])
                    key["MENTIONEES"][0]["M"]
                    for x in key["MENTIONEES"]:
                        targets.append(x["M"])
                    for target in targets:
                        try:
                            settings["mimic"]["target"][target] = True
                            line.sendMessage(msg.to,"Mimic has been added as")
                            break
                        except:
                            line.sendMessage(msg.to,"Added Target Fail !")
                            break
                elif msg.text.lower().startswith("mimicdel "):
                    targets = []
                    key = eval(msg.contentMetadata["MENTION"])
                    key["MENTIONEES"][0]["M"]
                    for x in key["MENTIONEES"]:
                        targets.append(x["M"])
                    for target in targets:
                        try:
                            del settings["mimic"]["target"][target]
                            line.sendMessage(msg.to,"Mimic deleting succes...")
                            break
                        except:
                            line.sendMessage(msg.to,"Deleted Target Fail !")
                            break
                elif text.lower() == 'mimiclist':
                    if settings["mimic"]["target"] == {}:
                        line.sendMessage(msg.to,"Tidak Ada Target")
                    else:
                        mc = "‚ïî‚ïê‚ïê[ Mimic List ]"
                        for mi_d in settings["mimic"]["target"]:
                            mc += "\n‚ï† "+line.getContact(mi_d).displayName
                        line.sendMessage(msg.to,mc + "\n‚ïö‚ïê‚ïê[ Finish ]")
                    
                elif "mimic" in msg.text.lower():
                    sep = text.split(" ")
                    mic = text.replace(sep[0] + " ","")
                    if mic == "on":
                        if settings["mimic"]["status"] == False:
                            settings["mimic"]["status"] = True
                            line.sendMessage(msg.to,"Mimic enabled.")
                    elif mic == "off":
                        if settings["mimic"]["status"] == True:
                            settings["mimic"]["status"] = False
                            line.sendMessage(msg.to,"Mimic disabled.")
#==============================================================================#
                elif text.lower() == '‡∏Ñ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°':
                    group = line.getGroup(to)
                    GS = group.creator.mid
                    line.sendContact(to, GS)
                    line.sendMessage(to, "")
                elif text.lower() == '‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á':
                    gid = line.getGroup(to)
                    line.sendMessage(to, "ID GROUP \n" + gid.id)
                elif text.lower() == '‡∏£‡∏π‡∏õ‡∏´‡πâ‡∏≠‡∏á':
                    group = line.getGroup(to)
                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus
                    line.sendImageWithURL(to, path)
                elif text.lower() == '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á':
                    gid = line.getGroup(to)
                    line.sendMessage(to, "[„Äê‚ú•‚ç£‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‚ç£‚ú•„Äë] \n" + gid.name)
                elif text.lower() == '‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == False:
                            ticket = line.reissueGroupTicket(to)
                            line.sendMessage(to, "Link Qr Group\nhttps://line.me/R/ti/g/{}".format(str(ticket)))
                elif text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == False:
                            line.sendMessage(to, "„Äê‚ú•‚ç£‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                        else:
                            group.preventedJoinByTicket = False
                            line.updateGroup(group)
                            line.sendMessage(to, "„Äê‚ú•‚ç£‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")
                elif text.lower() == '‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        if group.preventedJoinByTicket == True:
                            line.sendMessage(to, "„Äê‚ú•‚ç£‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                        else:
                            group.preventedJoinByTicket = True
                            line.updateGroup(group)
                            line.sendMessage(to, "„Äê‚ú•‚ç£‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚ùå")
                elif "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:" in msg.text:
                    bctxt = text.replace("‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®:","")
                    n = line.getGroupIdsJoined()
                    for manusia in n:
                        line.sendMessage(manusia,(bctxt))
                
                elif text.lower() == '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á':
                    group = line.getGroup(to)
                    try:
                        gCreator = group.creator.displayName
                    except:
                        gCreator = "Tidak ditemukan"
                    if group.invitee is None:
                        gPending = "0"
                    else:
                        gPending = str(len(group.invitee))
                    if group.preventedJoinByTicket == True:
                        gQr = "Tertutup"
                        gTicket = "Tidak ada"
                    else:
                        gQr = "Terbuka"
                        gTicket = "https://line.me/R/ti/g/{}".format(str(line.reissueGroupTicket(group.id)))
                    path = "http://dl.profile.line-cdn.net/" + group.pictureStatus
                    ret_ = "‚ïî‚ç£‚ä∞„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë‚ä±‚ç£‚ïó"
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á : {}".format(str(group.name))
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡πÑ‡∏≠‡∏î‡∏µ‡∏Å‡∏•‡∏∏‡πà‡∏° : {}".format(group.id)
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á : {}".format(str(gCreator))
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° : {}".format(str(len(group.members)))
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç : {}".format(gPending)
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏•‡∏¥‡πâ‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏±‡πâ‡∏¢ : {}".format(gQr)
                    ret_ += "\n‚ï†‚ç£‚å≤ ‡∏•‡∏¥‡πâ‡∏á : {}".format(gTicket)
                    ret_ += "\n‚ïö‚îÖ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ç£‚ä∞‚úø€û‚úø‚ä±‚ç£‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÖ‚ïù"
                    line.sendMessage(to, str(ret_))
                    line.sendImageWithURL(to, path)
                elif text.lower() == '‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ]"
                        no = 0 + 1
                        for mem in group.members:
                            ret_ += "\n‚ï† {}. {}".format(str(no), str(mem.displayName))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ]".format(str(len(group.members)))
                        line.sendMessage(to, str(ret_))
                elif text.lower() == '‡∏ö‡πâ‡∏≤‡∏ô':
                        groups = line.groups
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏±‡πà‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ]"
                        no = 0 + 1
                        for gid in groups:
                            group = line.getGroup(gid)
                            ret_ += "\n‚ï† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} Groups ]".format(str(len(groups)))
                        line.sendMessage(to, str(ret_))

                elif text.lower() == 'k1gruplist':
                        groups = ki.groups
                        ret_ = "‚ïî‚ïê‚ïê[ Group List ]"
                        no = 0 + 1
                        for gid in groups:
                            group = ki.getGroup(gid)
                            ret_ += "\n‚ï† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} Groups ]".format(str(len(groups)))
                        ki.sendMessage(to, str(ret_))

                elif text.lower() == 'k2listgrup':
                        groups = kk.groups
                        ret_ = "‚ïî‚ïê‚ïê[ Group List ]"
                        no = 0 + 1
                        for gid in groups:
                            group = kk.getGroup(gid)
                            ret_ += "\n‚ï† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} Groups ]".format(str(len(groups)))
                        kk.sendMessage(to, str(ret_))

                elif text.lower() == 'k3listroom':
                        groups = kc.groups
                        ret_ = "‚ïî‚ïê‚ïê[ Group List ]"
                        no = 0 + 1
                        for gid in groups:
                            group = kc.getGroup(gid)
                            ret_ += "\n‚ï† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} Groups ]".format(str(len(groups)))
                        kc.sendMessage(to, str(ret_))
						
                elif text.lower() == 'k4listroom':
                        groups = ke.groups
                        ret_ = "‚ïî‚ïê‚ïê[ Group List ]"
                        no = 0 + 1
                        for gid in groups:
                            group = ke.getGroup(gid)
                            ret_ += "\n‚ï† {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                            no += 1
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} Groups ]".format(str(len(groups)))
                        ke.sendMessage(to, str(ret_))						
#==============================================================================#
                elif text.lower() == '‡πÅ‡∏ó‡∏Ñ':
                    group = line.getGroup(msg.to)
                    nama = [contact.mid for contact in group.members]
                    k = len(nama)//100
                    for a in range(k+1):
                        txt = u''
                        s=0
                        b=[]
                        for i in group.members[a*100 : (a+1)*100]:
                            b.append({"S":str(s), "E" :str(s+6), "M":i.mid})
                            s += 7
                            txt += u'@Alin \n'
                        line.sendMessage(to, text=txt, contentMetadata={u'MENTION': json.dumps({'MENTIONEES':b})}, contentType=0)
                        line.sendMessage(to, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å {} ‡∏Ñ‡∏ô".format(str(len(nama))))

                elif text.lower() == '‡∏Ñ‡∏¥‡∏Å‡πÅ‡∏ó‡∏Ñ':
                    group = line.getGroup(msg.to)
                    nama = [contact.mid for contact in group.members if contact.mid != lineMID]
                    k = len(nama)//500
                    for a in range(k+1):
                        txt = ''
                        s=0
                        b=[]
                        for i in group.members[a*500 : (a+1)*500]:
                            b.append({"S":str(s), "E" :str(s+6), "M":i.mid})
                            s += 7
                            txt += '@Alin \n'
                        ki.sendMessage(to, text=txt, contentMetadata={'MENTION': json.dumps({'MENTIONEES':b})}, contentType=0)
                        ki.sendMessage(to, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {} ‡∏Ñ‡∏ô".format(str(len(nama))))          

                elif text.lower() == '‡πÅ‡∏≠‡∏ö':
                    tz = pytz.timezone("Asia/Jakarta")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    if msg.to in read['readPoint']:
                            try:
                                del read['readPoint'][msg.to]
                                del read['readMember'][msg.to]
                                del read['readTime'][msg.to]
                            except:
                                pass
                            read['readPoint'][msg.to] = msg.id
                            read['readMember'][msg.to] = ""
                            read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')
                            read['ROM'][msg.to] = {}
                            with open('read.json', 'w') as fp:
                                json.dump(read, fp, sort_keys=True, indent=4)
                                line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‚ç£‚ú•„Äë‚úî")
                    else:
                        try:
                            del read['readPoint'][msg.to]
                            del read['readMember'][msg.to]
                            del read['readTime'][msg.to]
                        except:
                            pass
                        read['readPoint'][msg.to] = msg.id
                        read['readMember'][msg.to] = ""
                        read['readTime'][msg.to] = datetime.now().strftime('%H:%M:%S')
                        read['ROM'][msg.to] = {}
                        with open('read.json', 'w') as fp:
                            json.dump(read, fp, sort_keys=True, indent=4)
                            line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‚ç£‚ú•„Äë‚úî:\n" + readTime)
                            
#                elif text.lower() == 'lurking off':
 #                   tz = pytz.timezone("Asia/Jakarta")
  #                  timeNow = datetime.now(tz=tz)
   #                 day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
    ##                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
      #              bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
       #             hr = timeNow.strftime("%A")
       #             bln = timeNow.strftime("%m")
        #            for i in range(len(day)):
         #               if hr == day[i]: hasil = hari[i]
          #          for k in range(0, len(bulan)):
           #             if bln == str(k): bln = bulan[k-1]
            #        readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
             #       if msg.to not in read['readPoint']:
              #          line.sendMessage(msg.to,"Lurking disabled")
               #     else:
                #        try:
                 #           del read['readPoint'][msg.to]
                  #          del read['readMember'][msg.to]
                   #         del read['readTime'][msg.to]
                    #    except:
                     #         pass
                      #  line.sendMessage(msg.to, "Delete reading point:\n" + readTime)
    
#                elif text.lower() == 'lurking reset':
 #                   tz = pytz.timezone("Asia/Jakarta")
  #                  timeNow = datetime.now(tz=tz)
   #                 day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
    #                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
     #               bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
      #              hr = timeNow.strftime("%A")
      # #             bln = timeNow.strftime("%m")
         #           for i in range(len(day)):
          #              if hr == day[i]: hasil = hari[i]
           #         for k in range(0, len(bulan)):
            #            if bln == str(k): bln = bulan[k-1]
             #       readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
              #      if msg.to in read["readPoint"]:
               #         try:
                #            del read["readPoint"][msg.to]
                 #           del read["readMember"][msg.to]
                  #          del read["readTime"][msg.to]
                   #     except:
                    #        pass
                     #   line.sendMessage(msg.to, "Reset reading point:\n" + readTime)
        #            else:
          #              line.sendMessage(msg.to, "Lurking belum diaktifkan ngapain di reset?")
                        
                elif text.lower() == '‡∏™‡πà‡∏≠‡∏á':
                    tz = pytz.timezone("Asia/Jakarta")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    if receiver in read['readPoint']:
                        if list(read["ROM"][receiver].items()) == []:
                            line.sendMessage(receiver,"[ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô ]:\nNone")
                        else:
                            chiya = []
                            for rom in list(read["ROM"][receiver].items()):
                                chiya.append(rom[1])
                            cmem = line.getContacts(chiya) 
                            zx = ""
                            zxc = ""
                            zx2 = []
                            xpesan = '[ ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô ]:\n'
                        for x in range(len(cmem)):
                            xname = str(cmem[x].displayName)
                            pesan = ''
                            pesan2 = pesan+"@c\n"
                            xlen = str(len(zxc)+len(xpesan))
                            xlen2 = str(len(zxc)+len(pesan2)+len(xpesan)-1)
                            zx = {'S':xlen, 'E':xlen2, 'M':cmem[x].mid}
                            zx2.append(zx)
                            zxc += pesan2
                        text = xpesan+ zxc + "\n[ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ]: \n" + readTime
                        try:
                            line.sendMessage(receiver, text, contentMetadata={'MENTION':str('{"MENTIONEES":'+json.dumps(zx2).replace(' ','')+'}')}, contentType=0)
                        except Exception as error:
                            print (error)
                        pass
                    else:
                        line.sendMessage(receiver,"Lurking has not been set.")
#==============================================================================#
                elif msg.text.lower().startswith("say-af "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'af'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
        
                elif msg.text.lower().startswith("say-sq "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'sq'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ar "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ar'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-hy "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'hy'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-bn "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'bn'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ca "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ca'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-zh "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'zh'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-zh-cn "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'zh-cn'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-zh-tw "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'zh-tw'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-zh-yue "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'zh-yue'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-hr "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'hr'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-cs "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'cs'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-da "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'da'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-nl "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'nl'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-en "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'en'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-en-au "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'en-au'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-en-uk "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'en-uk'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-en-us "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'en-us'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-eo "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'eo'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-fi "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'fi'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-fr "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'fr'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-de "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'de'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-el "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'el'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-hi "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'hi'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-hu "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'hu'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-is "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'is'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-id "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'id'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-it "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'it'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ja "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ja'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-km "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'km'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ko "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ko'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-la "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'la'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-lv "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'lv'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-mk "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'mk'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-no "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'no'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-pl "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'pl'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-pt "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'pt'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-do "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ro'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ru "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ru'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-sr "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'sr'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-si "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'si'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-sk "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'sk'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-es "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'es'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-es-es "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'es-es'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-es-us "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'es-us'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-sw "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'sw'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-sv "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'sv'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-ta "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'ta'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-th "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'th'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-tr "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'tr'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-uk "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'uk'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-vi "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'vi'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
                    
                elif msg.text.lower().startswith("say-cy "):
                    sep = text.split(" ")
                    say = text.replace(sep[0] + " ","")
                    lang = 'cy'
                    tts = gTTS(text=say, lang=lang)
                    tts.save("hasil.mp3")
                    line.sendAudio(msg.to,"hasil.mp3")
#==============================================================================# 
                elif msg.text.lower().startswith("tr-af "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='af')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sq "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sq')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-am "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='am')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ar "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ar')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-az "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='az')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-eu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='eu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-be "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='be')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bs "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bs')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-bg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='bg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ca "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ca')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ceb "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ceb')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ny "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ny')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zh-cn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zh-cn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zh-tw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zh-tw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-co "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='co')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-cs "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='cs')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-da "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='da')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-nl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='nl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-en "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='en')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-et "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='et')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ka "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ka')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-de "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='de')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-el "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='el')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ht "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ht')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ha "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ha')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-haw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='haw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-iw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='iw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hmn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hmn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-hu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='hu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-is "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='is')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ig "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ig')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-id "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='id')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ga "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ga')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-it "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='it')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ja "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ja')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-jw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='jw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-kn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='kn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-kk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='kk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-km "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='km')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ko "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ko')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ku "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ku')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ky "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ky')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lo "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lo')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-la "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='la')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lv "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lv')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-lb "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='lb')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ms "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ms')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ml "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ml')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-mn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='mn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-my "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='my')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ne "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ne')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-no "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='no')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ps "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ps')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fa "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fa')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pt "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pt')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-pa "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='pa')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ro "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ro')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ru "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ru')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sm "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sm')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-gd "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='gd')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-st "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='st')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sn "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sn')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sd "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sd')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-si "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='si')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sl "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sl')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-so "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='so')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-es "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='es')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-su "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='su')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sw "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sw')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-sv "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='sv')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-tg "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='tg')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ta "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ta')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-te "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='te')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-th "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='th')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-tr "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='tr')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-uk "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='uk')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-ur "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='ur')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-uz "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='uz')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-vi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='vi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-cy "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='cy')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-xh "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='xh')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-yi "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='yi')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-yo "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='yo')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-zu "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='zu')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-fil "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='fil')
                    A = hasil.text
                    line.sendMessage(msg.to, A)
                elif msg.text.lower().startswith("tr-he "):
                    sep = text.split(" ")
                    isi = text.replace(sep[0] + " ","")
                    translator = Translator()
                    hasil = translator.translate(isi, dest='he')
                    A = hasil.text
                    line.sendMessage(msg.to, A)

                elif msg.text in ["Jumanji"]:
                    hasil = "https://youtu.be/2QKg5SZ_35I"
                    A = hasil
                    line.sendVideoWithURL(msg.to, A)

#sender = msg._from
#            if msg.toType == 0:
#                if sender != line.profile.mid:
#==============================================================================#   
                elif "Broadcastvoice " in msg.text:
                    bctxt = msg.text.replace("Bcvoice ", "")
                    bc = (".Bdw.. Ini adalah Broadcast.. Salam Owner ARDIAN PURNAMA.. by. RFU boot sekawan")
                    cb = (bctxt + bc)
                    tts = gTTS(cb, lang='id', slow=False)
                    tts.save('tts.mp3')
                    n = line.getGroupIdsJoined()
                    for manusia in n:
                        line.sendAudio(manusia, 'tts.mp3')

                elif "Cbroadcastvoice " in msg.text:
                    bctxt = msg.text.replace("Cbcvoice ", "")
                    bc = (".Bdw.. Ini adalah Broadcast.. Salam Owner ARDIAN PURNAMA.. by. RFU boot sekawan")
                    cb = (bctxt + bc)
                    tts = gTTS(cb, lang='id', slow=False)
                    tts.save('tts.mp3')
                    n = line.getAllContactIdsJoined()
                    for manusia in n:
                        line.sendAudio(manusia, 'tts.mp3')

                elif "Wikipedia " in msg.text:
                      try:
                          wiki = msg.text.lower().replace("Wikipedia ","")
                          wikipedia.set_lang("id")
                          pesan="Title ("
                          pesan+=wikipedia.page(wiki).title
                          pesan+=")\n\n"
                          pesan+=wikipedia.summary(wiki, sentences=1)
                          pesan+="\n"
                          pesan+=wikipedia.page(wiki).url
                          line.sendMessage(msg.to, pesan)
                      except:
                              try:
                                  pesan="Over Text Limit! Please Click link\n"
                                  pesan+=wikipedia.page(wiki).url
                                  line.sendText(msg.to, pesan)
                              except Exception as e:
                                  line.sendMessage(msg.to, str(e))

                elif "Film:" in msg.text:
                    proses = msg.text.split(":")
                    get = msg.text.replace(proses[0] + ":","")
                    getfilm = get.split()
                    title = getfilm[0]
                    tahun = getfilm[1]
                    r = requests.get('http://www.omdbapi.com/?t='+title+'&y='+tahun+'&plot=full&apikey=4bdd1d70')
                    start = time.time()
                    data=r.text
                    data=json.loads(data)
                    hasil = "Informasi \n" +str(data["Title"])+ " (" +str(data["Year"])+ ")"
                    hasil += "\n\n " +str(data["Plot"])
                    hasil += "\n\nDirector : " +str(data["Director"])
                    hasil += "\nActors   : " +str(data["Actors"])
                    hasil += "\nRelease : " +str(data["Released"])
                    hasil += "\nGenre    : " +str(data["Genre"])
                    hasil += "\nRuntime   : " +str(data["Runtime"])
                    path = data["Poster"]
                    line.sendImageWithURL(msg.to, str(path))
                    line.sendMessage(msg.to,hasil)

                elif text.lower() == 'kalender':
                    tz = pytz.timezone("Asia/Makassar")
                    timeNow = datetime.now(tz=tz)
                    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                    hr = timeNow.strftime("%A")
                    bln = timeNow.strftime("%m")
                    for i in range(len(day)):
                        if hr == day[i]: hasil = hari[i]
                    for k in range(0, len(bulan)):
                        if bln == str(k): bln = bulan[k-1]
                    readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                    line.sendMessage(msg.to, readTime)                 
                elif "screenshotwebsite" in msg.text.lower():
                    sep = text.split(" ")
                    query = text.replace(sep[0] + " ","")
                    with requests.session() as web:
                        r = web.get("http://rahandiapi.herokuapp.com/sswebAPI?key=betakey&link={}".format(urllib.parse.quote(query)))
                        data = r.text
                        data = json.loads(data)
                        line.sendImageWithURL(to, data["result"])
                elif "checkdate" in msg.text.lower():
                    sep = msg.text.split(" ")
                    tanggal = msg.text.replace(sep[0] + " ","")
                    r=requests.get('https://script.google.com/macros/exec?service=AKfycbw7gKzP-WYV2F5mc9RaR7yE3Ve1yN91Tjs91hp_jHSE02dSv9w&nama=ervan&tanggal='+tanggal)
                    data=r.text
                    data=json.loads(data)
                    ret_ = "‚ïî‚ïê‚ïê[ D A T E ]"
                    ret_ += "\n‚ï† Date Of Birth : {}".format(str(data["data"]["lahir"]))
                    ret_ += "\n‚ï† Age : {}".format(str(data["data"]["usia"]))
                    ret_ += "\n‚ï† Birthday : {}".format(str(data["data"]["ultah"]))
                    ret_ += "\n‚ï† Zodiak : {}".format(str(data["data"]["zodiak"]))
                    ret_ += "\n‚ïö‚ïê‚ïê[ Success ]"
                    line.sendMessage(to, str(ret_))
                
                elif "instagram" in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.instagram.com/{}/?__a=1".format(search))
                        try:
                            data = json.loads(r.text)
                            ret_ = "‚ïî‚ïê‚ïê[ Profile Instagram ]"
                            ret_ += "\n‚ï† Nama : {}".format(str(data["user"]["full_name"]))
                            ret_ += "\n‚ï† Username : {}".format(str(data["user"]["username"]))
                            ret_ += "\n‚ï† Bio : {}".format(str(data["user"]["biography"]))
                            ret_ += "\n‚ï† Pengikut : {}".format(format_number(data["user"]["followed_by"]["count"]))
                            ret_ += "\n‚ï† Diikuti : {}".format(format_number(data["user"]["follows"]["count"]))
                            if data["user"]["is_verified"] == True:
                                ret_ += "\n‚ï† Verifikasi : Sudah"
                            else:
                                ret_ += "\n‚ï† Verifikasi : Belum"
                            if data["user"]["is_private"] == True:
                                ret_ += "\n‚ï† Akun Pribadi : Iya"
                            else:
                                ret_ += "\n‚ï† Akun Pribadi : Tidak"
                            ret_ += "\n‚ï† ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Post : {}".format(format_number(data["user"]["media"]["count"]))
                            ret_ += "\n‚ïö‚ïê‚ïê[ https://www.instagram.com/{} ]".format(search)
                            path = data["user"]["profile_pic_url_hd"]
                            line.sendImageWithURL(to, str(path))
                            line.sendMessage(to, str(ret_))
                        except:
                            line.sendMessage(to, "Pengguna tidak ditemukan")
                elif "fotoig" in msg.text.lower():
                    separate = msg.text.split(" ")
                    user = msg.text.replace(separate[0] + " ","")
                    profile = "https://www.instagram.com/" + user
                    with requests.session() as x:
                        x.headers['user-agent'] = 'Mozilla/5.0'
                        end_cursor = ''
                        for count in range(1):
                            print(('send foto : ', count))
                            r = x.get(profile, params={'max_id': end_cursor})                        
                            data = re.search(r'window._sharedData = (\{.+?});</script>', r.text).group(1)
                            j    = json.loads(data)                        
                            for node in j['entry_data']['ProfilePage'][0]['user']['media']['nodes']: 
                                page = 'https://www.instagram.com/p/' + node['code']
                                r = x.get(page)
                                print((node['display_src']))
                                line.sendImageWithURL(msg.to,node['display_src'])
                elif "‡∏Ç‡∏≠‡∏£‡∏π‡∏õ" in msg.text.lower():
                    separate = msg.text.split(" ")
                    search = msg.text.replace(separate[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("http://rahandiapi.herokuapp.com/imageapi?key=betakey&q={}".format(urllib.parse.quote(search)))
                        data = r.text
                        data = json.loads(data)
                        if data["result"] != []:
                            items = data["result"]
                            path = random.choice(items)
                            a = items.index(path)
                            b = len(items)
                            line.sendImageWithURL(to, str(path))
                elif "‡∏Å‡∏≤‡∏£‡∏ï‡∏π‡∏ô" in msg.text.lower():
                    separate = msg.text.split(" ")
                    search = msg.text.replace(separate[0] + " ","")
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("http://rahandiapi.herokuapp.com/imageapi?key=betakey&q={}".format(urllib.parse.quote(search)))
                        data = r.text
                        data = json.loads(data)
                        if data["result"] != []:
                            items = data["result"]
                            path = random.choice(items)
                            a = items.index(path)
                            b = len(items)
                            line.sendImageWithURL(to, str(path))
                elif "‡∏¢‡∏π‡∏ó‡∏π‡∏õ" in msg.text.lower():
                    sep = text.split(" ")
                    search = text.replace(sep[0] + " ","")
                    params = {"search_query": search}
                    with requests.session() as web:
                        web.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = web.get("https://www.youtube.com/results", params = params)
                        soup = BeautifulSoup(r.content, "html.parser")
                        ret_ = "‚ïî‚ïê‚ïê[ ‡∏ú‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ]"
                        datas = []
                        for data in soup.select(".yt-lockup-title > a[title]"):
                            if "&lists" not in data["href"]:
                                datas.append(data)
                        for data in datas:
                            ret_ += "\n‚ï†‚ïê‚ïê[ {} ]".format(str(data["title"]))
                            ret_ += "\n‚ï† https://www.youtube.com{}".format(str(data["href"]))
                        ret_ += "\n‚ïö‚ïê‚ïê[ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö {} ]".format(len(datas))
                        line.sendMessage(to, str(ret_))

                elif msg.text in ["Cctv on"]:
                    try:
                        del RfuCctv['point'][msg.to]
                        del RfuCctv['sidermem'][msg.to]
                        del RfuCctv['cyduk'][msg.to]
                    except:
                        pass
                    RfuCctv['point'][msg.to] = msg.id
                    RfuCctv['sidermem'][msg.to] = ""
                    RfuCctv['cyduk'][msg.to]=True
                    line.sendMessage(msg.to,"Cctv on Ready")
                elif msg.text in ["Cctv off"]:
                    if msg.to in RfuCctv['point']:
                        RfuCctv['cyduk'][msg.to]=False
                        line.sendText(msg.to, RfuCctv['sidermem'][msg.to])
                    else:
                        line.sendMessage(msg.to, "Cctv Already Off")

                elif text.lower() == 'selfbot off':
                    line.sendMessage(receiver, '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ã‡∏•‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
                    print ("Selfbot Off")
                    exit(1)

                elif text.lower() == '‡πÅ‡∏ó‡∏Ñ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô':
                    gs = line.getGroup(to)
                    targets = []
                    for g in gs.members:
                        if g.displayName in "":
                            targets.append(g.mid)
                    if targets == []:
                        line.sendMessage(to, "„Äê‚ú•‚ç£‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ô‡πÉ‡∏™‡πà‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô‚ç£‚ú•„Äë‚ùå")
                    else:
                        mc = ""
                        for target in targets:
                            mc += sendMessageWithMention(to,target) + "\n"
                        line.sendMessage(to, mc)
                elif text.lower() == '‡πÑ‡∏≠‡∏î‡∏µ‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô':
                    gs = line.getGroup(to)
                    lists = []
                    for g in gs.members:
                        if g.displayName in "":
                            lists.append(g.mid)
                    if lists == []:
                        line.sendMessage(to, "„Äê‚ú•‚ç£‡πÑ‡∏°‡πà‡∏û‡∏öMid‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô‚ç£‚ú•„Äë‚ùå")
                    else:
                        mc = ""
                        for mi_d in lists:
                            mc += "üëë->" + mi_d + "\n"
                        line.sendMessage(to,mc)
                elif text.lower() == '‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô':
                    gs = line.getGroup(to)
                    lists = []
                    for g in gs.members:
                        if g.displayName in "":
                            lists.append(g.mid)
                    if lists == []:
                        line.sendMessage(to, "„Äê‚ú•‚ç£‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ó‡∏•‡πà‡∏≠‡∏á‡∏´‡∏ô‚ç£‚ú•„Äë‚ùå")
                    else:
                        for ls in lists:
                            contact = line.getContact(ls)
                            mi_d = contact.mid
                            line.sendContact(to, mi_d)
                
                elif "‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πà‡∏ô " in msg.text:
                    Ri0 = text.replace("‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πà‡∏ô ","")
                    Ri1 = Ri0.rstrip()
                    Ri2 = Ri1.replace("@","")
                    Ri3 = Ri2.rstrip()
                    _name = Ri3
                    gs = line.getGroup(msg.to)
                    targets = []
                    for s in gs.members:
                        if _name in s.displayName:
                            targets.append(s.mid)
                    if targets == []:
                        pass
                    else:
                        for target in targets:
                            if target in admin:
                                pass
                            else:
                                try:
                                    line.kickoutFromGroup(to,[target])
                                    line.findAndAddContactsByMid(target)
                                    line.inviteIntoGroup(to,[target])
                                except:
                                    pass
                
                elif "‡πÑ‡∏õ‡∏´‡∏≥ " in msg.text:
                        vkick0 = msg.text.replace("‡πÑ‡∏õ‡∏´‡∏≥ ","")
                        vkick1 = vkick0.rstrip()
                        vkick2 = vkick1.replace("@","")
                        vkick3 = vkick2.rstrip()
                        _name = vkick3
                        gs = line.getGroup(msg.to)
                        targets = []
                        for s in gs.members:
                            if _name in s.displayName:
                                targets.append(s.mid)
                        if targets == []:
                            pass
                        else:
                            for target in targets:
                                try:
                                    line.kickoutFromGroup(msg.to,[target])
                                    line.findAndAddContactsByMid(target)
                                    line.inviteIntoGroup(msg.to,[target])
                                    line.cancelGroupInvitation(msg.to,[target])
                                except:
                                    pass
                
                elif "‡∏°‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô" in msg.text:
                    gs = line.getGroup(to)
                    targets = []
                    for g in gs.members:
                        if g.displayName in "":
                            targets.append(g.mid)
                    if targets == []:
                        pass
                    else:
                        for target in targets:
                            if target in admin:
                                pass
                            else:
                                try:
                                    line.kickoutFromGroup(to,[target])
                                except:
                                    pass
                
                elif text.lower() == '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô':
                    contactlist = line.getAllContactIds()
                    kontak = line.getContacts(contactlist)
                    num=1
                    msgs="üééList Friendüéé"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.displayName)
                        num=(num+1)
                    msgs+="\nüééList Friendüéé\n\nTotal Teman : %i" % len(kontak)
                    line.sendMessage(msg.to, msgs)

                elif msg.text in ["‡∏ö‡∏•‡πá‡∏≠‡∏Ñ"]: 
                    blockedlist = line.getBlockedContactIds()
                    kontak = line.getContacts(blockedlist)
                    num=1
                    msgs="‚ïê‚ïê‚ïê‚ïê‚ïêDaftar Akun Yang di Blocked‚ïê‚ïê‚ïê‚ïê‚ïê"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.displayName)
                        num=(num+1)
                    msgs+="\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêList Blocked‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\nTotal Blocked : %i" % len(kontak)
                    line.sendMessage(receiver, msgs)

                elif msg.text in ["Friendlist mid"]: 
                    gruplist = line.getAllContactIds()
                    kontak = line.getContacts(gruplist)
                    num=1
                    msgs="‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêList FriendMid‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
                    for ids in kontak:
                        msgs+="\n[%i] %s" % (num, ids.mid)
                        num=(num+1)
                    msgs+="\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêList FriendMid‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\nTotal Friend : %i" % len(kontak)
                    line.sendMessage(receiver, msgs)

                elif msg.text.lower() == '‡∏•‡∏¥‡πâ‡∏á':
                	if msg.toType == 2:
                         g = line.getGroup(receiver)
                         line.updateGroup(g)
                         gurl = line.reissueGroupTicket(receiver)
                         line.sendMessage(receiver,"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îì\n‚ï†‚ùÇline://ti/g/" + gurl + "\n‚ï†\n‚ï†‚ùÇLink Groupnya Tanpa Buka Qr\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ")

                elif msg.text == "‡∏ß‡πà‡∏≤‡∏ß‡πÅ‡∏û‡∏û":
                	line.sendMessage(receiver,">nekopoi.host\n>sexvideobokep.com\n>memek.com\n>pornktube.com\n>faketaxi.com\n>videojorok.com\n>watchmygf.mobi\n>xnxx.com\n>pornhd.com\n>xvideos.com\n>vidz7.com\n>m.xhamster.com\n>xxmovies.pro\n>youporn.com\n>pornhub.com\n>youjizz.com\n>thumzilla.com\n>anyporn.com\n>brazzers.com\n>redtube.com\n>youporn.com")

                elif msg.text.lower() == 'invite:gcreator':
                	if msg.toType == 2:                
                           ginfo = line.getGroup(receiver)
                           try:
                               gcmid = ginfo.creator.mid
                           except:
                               gcmid = "Error"
                           if settings["lang"] == "JP":
                               line.inviteIntoGroup(receiver,[gcmid])
                               line.sendMessage(receiver, "Typeüëâ Invite Pembuat Group Succes")
                           else:
                               line.inviteIntoGroup(receiver,[gcmid])
                               line.sendMessage(receiver, "Pembuat Group Sudah di dalam")

                elif msg.text in ["/uninstall"]:
                    if msg.toType == 2:
                        ginfo = line.getGroup(receiver)
                        try:
                            line.leaveGroup(receiver)
                            ki.leaveGroup(receiver)
                            kk.leaveGroup(receiver)
                            kc.leaveGroup(receiver)
                            ke.leaveGroup(receiver)							
                        except:
                            pass

                elif msg.text in ["Tagimage on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ"]:
                        settings['potoMention'] = True
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                
                elif msg.text in ["Tagimage off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏£‡∏π‡∏õ"]:
                        settings['potoMention'] = False
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")

                elif msg.text in ["Respontag1 on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ1","Tag1 on","Respon1:on"]:
                    settings["detectMention"] = True
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà1‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                
                elif msg.text in ["Respontag1 off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ1","Tag1 off","Respon1:off"]:
                    settings["detectMention"] = False
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà1‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")

                elif msg.text in ["Respontag2 on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2","Tag2 on","Respon2:on"]:
                    settings["detectMention2"] = True
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà2‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                
                elif msg.text in ["Respontag2 off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ2","Tag2 off","Respon2:off"]:
                    settings["detectMention2"] = False
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà2‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")

                elif msg.text in ["Respontag3 on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ3","Tag3 on","Respon3:on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏ï‡∏±‡∏™"]:
                    settings["detectMention3"] = True
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà3‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                
                elif msg.text in ["Respontag3 off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ3","Tag3 off","Respon3:off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏ï‡∏±‡∏™"]:
                    settings["detectMention3"] = False
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏Ñ‡∏ó‡∏µ‡πà3‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")

                elif msg.text in ["‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏Ñ‡∏¥‡∏Å","Kicktag on","kicktag:on","‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏ï‡∏∞"]:
                    settings["kickMention"] = True
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                
                elif msg.text in ["‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡∏Ñ‡∏¥‡∏Å","Kicktag off","kicktag:off","‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏ï‡∏∞"]:
                    settings["kickMention"] = False
                    line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚ùå")



                elif '‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ó‡∏Ñ: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÅ‡∏ó‡∏Ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚úè‚úè")
                     else:
                         settings["Respontag"] = spl
                         line.sendMessage(msg.to, "„ÄåRespon Msg„Äç\n‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:\n\n„Äå{}„Äç".format(str(spl)))

                elif '‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚úè‚úè")
                     else:
                          settings["welcome"] = spl
                          line.sendMessage(msg.to, "„ÄåWelcome Msg„Äç\n‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏∑‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:\n\n„Äå{}„Äç".format(str(spl)))
                          
                elif '‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å: ' in msg.text:
                  if msg._from in admin:
                     spl = msg.text.replace('‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å: ','')
                     if spl in [""," ","\n",None]:
                         line.sendMessage(msg.to, "‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°üìçüìç")
                     else:
                          settings["bye"] = spl
                          line.sendMessage(msg.to, "„ÄåBye Msg„Äç\n‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:\n\n„Äå{}„Äç".format(str(spl)))

                elif msg.text.lower().startswith("‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô "):
                    sep = msg.text.split(" ")
                    textnya = msg.text.replace(sep[0] + " ","")
                    urlnya = "http://chart.apis.google.com/chart?chs=480x80&cht=p3&chtt=" + textnya + "&chts=FFFFFF,70&chf=bg,s,000000"
                    line.sendImageWithURL(msg.to, urlnya)

                elif "kedip " in msg.text:
                    txt = msg.text.replace("kedip ", "")
                    t1 = "\xf4\x80\xb0\x82\xf4\x80\xb0\x82\xf4\x80\xb0\x82\xf4\x80\xb0\x82\xf4\x80\xa0\x81\xf4\x80\xa0\x81\xf4\x80\xa0\x81"
                    t2 = "\xf4\x80\x82\xb3\xf4\x8f\xbf\xbf"
                    line.sendMessage(msg.to, t1 + txt + t2)						
                elif msg.text in ["‡∏ö‡∏≠‡∏ó1‡∏•‡∏ö‡∏™‡∏¥‡∏£‡∏¥"]:
                    if msg.toType == 2:
                        print("Kick Siri")
                        x = ki.getGroup(msg.to)
                        if kiMID in [i.mid for i in x.members]:
                            sirilist = [i.mid for i in x.members if any(word in i.displayName for word in ["Doctor.A","Eliza","Parry","Rakko","„Åó„Çä„Å°„ÇÉ„Çì"]) or i.displayName.isdigit()]
                            if sirilist == []:
                                ki.sendText(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏£‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°.")
                            for target in sirilist:
                                try:
                                    ki.kickoutFromGroup(msg.to,[target])
                                except:
                                    pass
										
                elif msg.text in ["‡∏ö‡∏≠‡∏ó2‡∏•‡∏ö‡∏™‡∏¥‡∏£‡∏¥"]:
                    if msg.toType == 2:
                        print("Kick Siri")
                        x = kk.getGroup(msg.to)
                        if kkMID in [i.mid for i in x.members]:
                            sirilist = [i.mid for i in x.members if any(word in i.displayName for word in ["Doctor.A","Eliza","Parry","Rakko","„Åó„Çä„Å°„ÇÉ„Çì"]) or i.displayName.isdigit()]
                            if sirilist == []:
                                kk.sendText(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏£‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°.")
                            for target in sirilist:
                                try:
                                    kk.kickoutFromGroup(msg.to,[target])
                                except:
                                    pass
                elif msg.text in ["‡∏ö‡∏≠‡∏ó3‡∏•‡∏ö‡∏™‡∏¥‡∏£‡∏¥"]:
                    if msg.toType == 2:
                        print("Kick Siri")
                        x = kc.getGroup(msg.to)
                        if kcMID in [i.mid for i in x.members]:
                            sirilist = [i.mid for i in x.members if any(word in i.displayName for word in ["Doctor.A","Eliza","Parry","Rakko","„Åó„Çä„Å°„ÇÉ„Çì"]) or i.displayName.isdigit()]
                            if sirilist == []:
                                kc.sendText(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏£‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°.")
                            for target in sirilist:
                                try:
                                    kc.kickoutFromGroup(msg.to,[target])
                                except:
                                    pass
                elif msg.text in ["‡∏ö‡∏≠‡∏ó4‡∏•‡∏ö‡∏™‡∏¥‡∏£‡∏¥"]:
                    if msg.toType == 2:
                        print("Kick Siri")
                        x = ke.getGroup(msg.to)
                        if kcMID in [i.mid for i in x.members]:
                            sirilist = [i.mid for i in x.members if any(word in i.displayName for word in ["Doctor.A","Eliza","Parry","Rakko","„Åó„Çä„Å°„ÇÉ„Çì"]) or i.displayName.isdigit()]
                            if sirilist == []:
                                ke.sendText(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏£‡∏¥‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°.")
                            for target in sirilist:
                                try:
                                    ke.kickoutFromGroup(msg.to,[target])
                                except:
                                    pass									
                elif "Spam " in msg.text:
                    txt = msg.text.split(" ")
                    jmlh = int(txt[2])
                    teks = msg.text.replace("Spam "+str(txt[1])+" "+str(jmlh)+" ","")
                    tulisan = jmlh * (teks+"\n")
                    if txt[1] == "on":
                        if jmlh <= 100000:
                           for x in range(jmlh):
                               line.sendMessage(msg.to, teks)
                        else:
                           line.sendMessage(msg.to, "Out of Range!")
                    elif txt[1] == "off":
                        if jmlh <= 100000:
                            line.sendMessage(msg.to, tulisan)
                        else:
                            line.sendMessage(msg.to, "Out Of Range!")
                            
                elif 'reject inv' in msg.text.lower():
                   if msg.toType == 2:
                       X = line.getGroup(msg.to)
                       if X.invitee is not None:
                           gInviMids = [contact.mid for contact in X.invitee]
                           line.cancelGroupInvitation(msg.to, gInviMids)
                       else:
                           if settings["lang"] == "JP":
                               line.sendMessage(msg.to,"No one is inviting„ÄÇ")
                           else:
                               line.sendMessage(msg.to,"Sorry, nobody absent")
                   else:
                       if settings["lang"] == "JP":
                           line.sendMessage(msg.to,"Can not be used outside the group")
                       else:
                           line.sendMessage(msg.to,"Not for use less than group")

                elif msg.text in ["Inviteuser"]:
                        settings["winvite"] = True
                        line.sendMessage(msg.to,"send a contact to invite user")

                elif msg.text.lower() == 'runtime':
                        eltime = time.time()
                        van = "Bot has been running for "+waktu(eltime)
                        line.sendMessage(msg.to,van)
#=============COMMAND KICKER===========================#
                elif msg.text in ["cb"]:
                    settings["blacklist"] = {}
                    line.sendMessage(msg.to,"‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏£‡πâ‡∏≠‡∏¢")
                    print ("Clear Ban")

                elif text.lower() == '‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤':
                    if msg.toType == 2:
                        group = line.getGroup(to)
                        group.preventedJoinByTicket = False
                        line.updateGroup(group)
                        invsend = 0
                        ticket = line.reissueGroupTicket(to)
                        ki.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        kk.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        kc.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)
                        ke.acceptGroupInvitationByTicket(to,format(str(ticket)))
                        time.sleep(0.01)                        
                        group.preventedJoinByTicket = True
                        line.updateGroup(group)
                        print ("Kicker Join")

                elif '‡πÅ‡∏°‡πà‡∏á‡∏ï‡∏≤‡∏¢' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               random.choice(Rfu).kickoutFromGroup(msg.to,[target])      
                               print ("Rfu kick User")
                           except:
                               random.choice(Rfu).sendMessage(msg.to,"Limit kaka üò´")

                elif "nuke" in msg.text.lower():
                    if msg.toType == 2:
#                    print  ("ok")
                    _name = msg.text.replace("nuke","")
                    gs = line.getGroup(msg.to)
                    targets = []
                    for g in gs.members:
                        if _name in g.displayName:
                            targets.append(g.mid)
                    if targets == []:
                        line.sendMessage(msg.to,"Not found.")
                    else:
                        for target in targets:
                                line.kickoutFromGroup(msg.to,[target])
                                print (msg.to,[g.mid])
                                
                elif "invitegroupcall" in msg.text.lower():
                            if msg.toType == 2:
                                sep = text.split(" ")
                                strnum = text.replace(sep[0] + " ","")
                                num = int(strnum)
                                line.sendMessage(to, "‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à(ÔΩÄ„Éªœâ„Éª¬¥)")
                                for var in range(0,num):
                                    group = line.getGroup(to)
                                    members = [mem.mid for mem in group.members]
                                    line.acquireGroupCallRoute(to)
                                    line.inviteIntoGroupCall(to, contactIds=members)
                                    
                elif '.invitetocall' in text.lower():
                        cxz = line.getGroup(msg.to).members
                        zxc = line.getProfile().mid
                       line.inviteIntoGroupCall(msg.to,[uid.mid for uid in cxz if uid.mid != zxc])
                       line.sendMessage(msg.to,"‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à(ÔΩÄ„Éªœâ„Éª¬¥)")
                
                elif '‡∏û‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏¢' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               line.kickoutFromGroup(msg.to,[target])             
                               print ("Sb Kick User")
                           except:
                               line.sendMessage(msg.to,"Limit kaka üò´")                               

                elif 'k1 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ki.kickoutFromGroup(msg.to,[target])           
                               print ("K1 Kick User")
                           except:
                               ki.sendMessage(msg.to,"Limit kaka üò´")                               

                elif 'k2 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kk.kickoutFromGroup(msg.to,[target])
                               print ("K2 kick user")
                           except:
                               kk.sendMessage(msg.to,"Limit kaka üò´")                              

                elif 'k3 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kc.kickoutFromGroup(msg.to,[target])
                               print ("K3 kick user")
                           except:
                               kc.sendMessage(msg.to,"Limit kaka üò´")                              

                elif 'k4 ' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ke.kickoutFromGroup(msg.to,[target])
                               print ("K3 kick user")
                           except:
                               ke.sendMessage(msg.to,"Limit kaka üò´")                              
                               
                elif 'invite' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               line.inviteIntoGroup(msg.to,[target])
                               line.sendMessage(receiver, "Typeüëâ Invite Succes")
                           except:
                               line.sendMessage(msg.to,"Typeüëâ Limit Invite")

                elif 'k1 invite' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ki.inviteIntoGroup(msg.to,[target])
                               ki.sendMessage(receiver, "Typeüëâ Invite Succes")
                               print ("R1 invite User")
                           except:
                               ki.sendMessage(msg.to,"Typeüëâ Limit Invite")                               

                elif 'k2 inv' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kk.inviteIntoGroup(msg.to,[target])
                               kk.sendMessage(receiver, "Typeüëâ Invite Succes")
                               ("R2 invite User")
                           except:
                               kk.sendMessage(msg.to,"Typeüëâ Limit Invite")                               

                elif 'k3 getinvite' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               kc.inviteIntoGroup(msg.to,[target])
                               kc.sendMessage(receiver, "Typeüëâ Invite Succes")
                               ("R3 invite User")
                           except:
                               kc.sendMessage(msg.to,"Typeüëâ Limit Invite")                               

                elif 'k4 getinvite' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               ke.inviteIntoGroup(msg.to,[target])
                               ke.sendMessage(receiver, "Typeüëâ Invite Succes")
                               ("R4 invite User")
                           except:
                               ke.sendMessage(msg.to,"Typeüëâ Limit Invite")                               

                elif "Cleanse" in msg.text:
                	if msg.toType == 2:
                         _name = msg.text.replace("Cleanse","")
                         gs = line.getGroup(receiver)
                         line.sendMessage(receiver,"Just some casual cleansing √¥")
                         targets = []
                         for g in gs.members:
                             if _name in g.displayName:
                                 targets.append(g.mid)
                         if targets == []:
                             line.sendMessage(receiver,"Not found.")
                         else:
                             for target in targets:
                             	if not target in Rfu:
                                     try:
                                         klist=[line,ki,kk,kc,ke]
                                         kicker=random.choice(klist)
                                         kicker.kickoutFromGroup(receiver,[target])
                                         print((receiver,[g.mid]))
                                     except:
                                         line.sendMessage(receiver,"Group cleanse")
                                         print ("Cleanse Group")
                                         
                elif "nuke" in msg.text.lower:
                    if msg.toType == 2:
                        _name = msg.text.replace("nuke","")
                        gs = line.getGroup(msg.to)
                        targets = []
                        for g in gs.members:
                            if _name in g.displayName:
                                targets.append(g.mid)
                        if targets == []:
                             line.sendMessage(msg.to,"Not found.")
                       else:
                           for target in targets:
                             	if not target in Rfu:
                                     try:
                                         klist=[line,ki,kk,kc,ke]
                                         kicker=random.choice(klist)
                                         kicker.kickoutFromGroup(receiver,[target])
                                         print((receiver,[g.mid]))
                                     except:
                                         line.sendMessage(receiver,"Group cleanse")
                                         line.kickoutFromGroup(msg.to,[target])
                                         print (msg.to,[g.mid])
                                
                elif msg.text in ["Scan blacklist"]:
                	if msg.toType == 2:
                         group = line.getGroup(receiver)
                         gMembMids = [contact.mid for contact in group.members]
                         matched_list = []
                         for tag in settings["blacklist"]:
                             matched_list+=[str for str in gMembMids if str == tag]
                         if matched_list == []:
                             line.sendMessage(receiver,"Nots in Blacklist")
                         else:
                             for jj in matched_list:
                                 try:
                                     klist=[line,ki,kk,kc,ke]
                                     kicker=random.choice(klist)
                                     kicker.kickoutFromGroup(receiver,[jj])
                                     print((receiver,[jj]))
                                 except:
                                     line.sendMessage(receiver,"sorry bl ke cyduk")
                                     print ("Blacklist di Kick")

                elif text.lower() == "‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó":
                        if msg._from in Family:
                            try:
                                line.removeAllMessages(op.param2)
                                kk.removeAllMessages(op.param2)
                                kc.removeAllMessages(op.param2)
                                ke.removeAllMessages(op.param2)                                
                                line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî")
                            except:
                                pass
                                print ("„Äê‚ú•‚ç£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‚ç£‚ú•„Äë‚úî")

                elif text.lower() == "‡∏≠‡∏≠‡∏Å":
                    if msg._from in Family:
                        ki.leaveGroup(msg.to)
                        kk.leaveGroup(msg.to)
                        kc.leaveGroup(msg.to)
                        ke.leaveGroup(msg.to)                        
                        print ("Kicker Leave")

                elif text.lower() == "leaveall":
                    if msg._from in Family:
                        gid = line.getGroupIdsJoined()
                        for i in gid:
                            ki.leaveGroup(i)
                            kk.leaveGroup(i)
                            kc.leaveGroup(i)
                            ke.leaveGroup(i)                            
                            print ("Kicker Leave All group")

                elif "‡∏≠‡∏±‡∏û‡∏ä‡∏∑‡πà‡∏≠: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = line.getProfile()
                        profile_A.displayName = string
                        line.updateProfile(profile_A)
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî " + string)
                        print ("Update Name")

                elif "‡∏≠‡∏±‡∏û‡∏ï‡∏±‡∏™: " in msg.text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = line.getProfile()
                        profile_A.statusMessage = string
                        line.updateProfile(profile_A)
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî " + string)
                        print ("Update Bio Succes")

                elif "‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏Å: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = ki.getProfile()
                        profile_B = kk.getProfile()
                        profile_C = kc.getProfile()
                        profile_D = ke.getProfile()                        
                        profile_A.displayName = string
                        profile_B.displayName = string
                        profile_C.displayName = string
                        profile_D.displayName = string                        
                        ki.updateProfile(profile_A)
                        kk.updateProfile(profile_B)
                        kc.updateProfile(profile_C)
                        ke.updateProfile(profile_D)                        
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ä‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî : " + string)
                        print ("Update Name All Kicker")

                elif "‡∏ï‡∏±‡∏™‡∏Ñ‡∏¥‡∏Å: " in text.lower():
                    if msg._from in Family:
                        proses = text.split(": ")
                        string = text.replace(proses[0] + ": ","")
                        profile_A = ki.getProfile()
                        profile_B = kk.getProfile()
                        profile_C = kc.getProfile()
                        profile_D = kc.getProfile()                        
                        profile_A.statusMessage = string
                        profile_B.statusMessage = string
                        profile_C.statusMessage = string
                        profile_D.statusMessage = string                        
                        ki.updateProfile(profile_A)
                        kk.updateProfile(profile_B)
                        kc.updateProfile(profile_C)
                        ke.updateProfile(profile_D)                        
                        line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ä‡∏™‡πÄ‡∏ï‡∏ï‡∏±‡∏™‡∏Ñ‡∏¥‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚ç£‚ú•„Äë‚úî : " + string)
                        print ("Update Bio All Kicker")

                elif text.lower() == "‡πÄ‡∏ó‡∏™":
                    if msg._from in Family:
                        profile = ki.getProfile()
                        text = profile.displayName + "\n ‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö‡∏ö..(*^Ôπè^*)ü§£ü§£"
                        ki.sendMessage(to, text)                                
                        profile = kk.getProfile()
                        text = profile.displayName + "\n ‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö‡∏ö..(*^Ôπè^*)ü§£ü§£ü§£ü§£"
                        kk.sendMessage(to, text)                                
                        profile = kc.getProfile()
                        text = profile.displayName + "\n ‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö‡∏ö..(*^Ôπè^*)ü§£ü§£ü§£ü§£ü§£ü§£"
                        kc.sendMessage(to, text)
                        profile = ke.getProfile()                        
                        text = profile.displayName + "\n ‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö‡∏ö..(*^Ôπè^*)ü§£ü§£ü§£ü§£ü§£ü§£ü§£ü§£"
                        ke.sendMessage(to, text)                        
                        print ("Kicker Respon")

                elif msg.text in ["Bot"]:
                    ki.sendMessage(msg.to,"„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")
                    kk.sendMessage(msg.to,"„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")
                    kc.sendMessage(msg.to,"„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")
                    ke.sendMessage(msg.to,"„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")

                elif msg.text in ["‡∏£‡∏µ‡∏ö‡∏π‡∏ó"]:
                	line.sendMessage(msg.to, "„Äê‚ú•‚ç£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏ö‡∏π‡∏ó..‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‚ç£‚ú•„Äë ‚åõ‚åõ")
                    line.sendMessage(msg.to, "LOADING:‚ñí...0%")
                    line.sendMessage(msg.to, "‚ñà‚ñí... 10.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñí... 20.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñí... 30.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñí... 40.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 50.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 60.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 70.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 80.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 90.0%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 99.9%")
                    line.sendMessage(msg.to, "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí... 100.0%")
                    line.sendMessage(msg.to, "„Äê‚ú•‚ç£REBOOTS.. COMPLETE‚ç£‚ú•„Äë‚úî")
                    line.sendMessage(msg.to, "„Äò‚Ä¢‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ö‡∏π‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à..‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‚Ä¢„Äô (*¬ØÔ∏∂¬Ø*)‚úî")
                    line.sendMessage(msg.to, "‚úçBY‚û¢„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë..‚úî")
                    line.sendMessage(msg.to,"„Äê‚ú•REBOOT BY‚ç£‚å≤ Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")
                elif msg.text.lower().startswith("bitcoin"):
                   search = msg.text.split("bitcoin")
                   with requests.session() as web:
                       web.headers["User-Agent"] = random.choice(settings["userAgent"])
                       url = "https://xeonwz.herokuapp.com/bitcoin.api"
                       r = web.get(url)
                       data=r.text
                       data=json.loads(data)
                       print(data)
                       hasil = "„Äå Bitcoin Result „Äç"
                       hasil += "\nPrice : " +str(data["btc"])                                
                       hasil += "\nExpensive : " +str(data["high"])
                       hasil += "\nCheap : " +str(data["low"])               
                       line.sendMessage(to, str(hasil))
#=============COMMAND PROTECT=========================#
                elif msg.text.lower() == 'protect on':
                    if RfuProtect["protect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                    else:
                        RfuProtect["protect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")

                elif msg.text.lower() == 'protect off':
                    if RfuProtect["protect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                    else:
                        RfuProtect["protect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô   ")

                elif msg.text.lower() == 'cancel pro on':
                    if RfuProtect["cancelprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                    else:
                        RfuProtect["cancelprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")

                elif msg.text.lower() == 'cancel pro off':
                    if RfuProtect["cancelprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                    else:
                        RfuProtect["cancelprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")

                elif msg.text.lower() == 'invit pro on':
                    if RfuProtect["inviteprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                    else:
                        RfuProtect["inviteprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")

                elif msg.text.lower() == 'invit pro off':
                    if RfuProtect["inviteprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                    else:
                        RfuProtect["inviteprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏ä‡∏¥‡∏ç   ")

                elif msg.text.lower() == 'link pro on':
                    if RfuProtect["linkprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                    else:
                        RfuProtect["linkprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")

                elif msg.text.lower() == 'link pro off':
                    if RfuProtect["linkprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                    else:
                        RfuProtect["linkprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡∏¥‡πâ‡∏á   ")

                elif msg.text.lower() == 'guest pro on':
                    if RfuProtect["Protectguest"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                    else:
                        RfuProtect["Protectguest"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")

                elif msg.text.lower() == 'guest pro off':
                    if RfuProtect["Protectguest"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                    else:
                        RfuProtect["Protectguest"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å   ")

                elif msg.text.lower() == 'join pro on':
                    if RfuProtect["Protectjoin"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                    else:
                        RfuProtect["Protectjoin"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                        else:
                            line.sendMessage(msg.to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")

                elif msg.text.lower() == 'join pro off':
                    if RfuProtect["Protectjoin"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                    else:
                        RfuProtect["Protectjoin"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")
                        else:
                            line.sendMessage(msg.to,"‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤   ")

                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î':
                    if RfuProtect["inviteprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‚úî„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"‚úî„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["inviteprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                    if RfuProtect["cancelprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["cancelprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                    if RfuProtect["protect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["protect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚úî")
                    if RfuProtect["linkprotect"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["linkprotect"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚úî")
                    if RfuProtect["Protectguest"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["Protectguest"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                    if RfuProtect["Protectjoin"] == True:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                    else:
                        RfuProtect["Protectjoin"] = True
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚úî")

                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏´‡∏°‡∏î':
                    if RfuProtect["inviteprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"‚ùå„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"‚ùå„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["inviteprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚ùå")
                    if RfuProtect["cancelprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["cancelprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏ç‚ç£‚ú•„Äë‚ùå")
                    if RfuProtect["protect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["protect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‚ç£‚ú•„Äë‚ùå")
                    if RfuProtect["linkprotect"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["linkprotect"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏á‚ç£‚ú•„Äë‚ùå")
                    if RfuProtect["Protectguest"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["Protectguest"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Ñ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                    if RfuProtect["Protectjoin"] == False:
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                    else:
                        RfuProtect["Protectjoin"] = False
                        if settings["lang"] == "JP":
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")
                        else:
                            line.sendMessage(msg.to,"„Äê‚ú•‚ç£‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‚ç£‚ú•„Äë‚ùå")

#==============FINNISHING PROTECT========================#
                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö':
                        if settings["Wc"] == True:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°   .")
                        else:
                            settings["Wc"] = True
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°   ")
                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö':
                        if settings["Wc"] == False:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°   ")
                        else:
                            settings["Wc"] = False
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°   ")

                elif msg.text.lower() == '‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å':
                        if settings["Lv"] == True:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°   ")
                        else:
                            settings["Lv"] = True
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°   ")
                elif msg.text.lower() == '‡∏õ‡∏¥‡∏î‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å':
                        if settings["Lv"] == False:
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°   ")
                        else:
                            settings["Lv"] = False
                            if settings["lang"] == "JP":
                                line.sendMessage(to,"‡∏õ‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°   ")

                elif text.lower() == '/‡∏•‡∏ö‡∏£‡∏±‡∏ô':
                    gid = line.getGroupIdsInvited()
                    start = time.time()
                    for i in gid:
                        line.rejectGroupInvitation(i)
                    elapsed_time = time.time() - start
                    line.sendMessage(to, "‡∏•‡∏ö‡∏£‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏≠‡∏£‡∏±‡∏ö")
                    line.sendMessage(to, "‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: %s‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" % (elapsed_time))								
								
                elif "Allban" in msg.text:
                  if msg._from in Family:
                      if msg.toType == 2:
                           print ("All Banlist")
                           _name = msg.text.replace("Allban","")
                           gs = line.getGroup(msg.to)
                           line.sendMessage(msg.to,"Banned all")
                           targets = []
                           for g in gs.members:
                               if _name in g.displayName:
                                    targets.append(g.mid)
                           if targets == []:
                                line.sendMessage(msg.to,"Maaf")
                           else:
                               for target in targets:
                                   if not target in Family:
                                       try:
                                           settings["blacklist"][target] = True
                                           f=codecs.open('st2__b.json','w','utf-8')
                                           json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                                       except:
                                           line.sentMessage(msg.to,"All members has been added ban.")
										   
                elif 'ban' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               settings["blacklist"][target] = True
                               f=codecs.open('st2__b.json','w','utf-8')
                               json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                               line.sendMessage(msg.to,"Succes added for the blacklist ")
                               print ("Banned User")
                           except:
                               line.sendMessage(msg.to,"Contact Not Found")

                elif 'unban' in text.lower():
                       targets = []
                       key = eval(msg.contentMetadata["MENTION"])
                       key["MENTIONEES"] [0] ["M"]
                       for x in key["MENTIONEES"]:
                           targets.append(x["M"])
                       for target in targets:
                           try:
                               del settings["blacklist"][target]
                               f=codecs.open('st2__b.json','w','utf-8')
                               json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                               line.sendMessage(msg.to,"Succes unban from the blacklist. ")
                               print ("Unbanned User")
                           except:
                               line.sendMessage(msg.to,"Contact Not Found")

                elif msg.text in ["‡πÄ‡∏ä‡∏Ñ‡∏î‡∏≥"]:
                  if msg._from in Family:
                    if settings["blacklist"] == {}:
                        line.sendMessage(msg.to,"‡πÑ‡∏°‡πà‡∏û‡∏ö") 
                    else:
                        line.sendMessage(msg.to,"‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏î‡∏≥")
                        mc = "Blacklist User\n"
                        for mi_d in settings["blacklist"]:
                            mc += "[‚àö] " + line.getContact(mi_d).displayName + " \n"
                        line.sendMessage(msg.to, mc + "")

                elif msg.text.lower().startswith("urban "):
                    sep = msg.text.split(" ")
                    judul = msg.text.replace(sep[0] + " ","")
                    url = "http://api.urbandictionary.com/v0/define?term="+str(judul)
                    with requests.session() as s:
                        s.headers["User-Agent"] = random.choice(settings["userAgent"])
                        r = s.get(url)
                        data = r.text
                        data = json.loads(data)
                        y = "[ Result Urban ]"
                        y += "\nTags: "+ data["tags"][0]
                        y += ","+ data["tags"][1]
                        y += ","+ data["tags"][2]
                        y += ","+ data["tags"][3]
                        y += ","+ data["tags"][4]
                        y += ","+ data["tags"][5]
                        y += ","+ data["tags"][6]
                        y += ","+ data["tags"][7]
                        y += "\n[1]\nAuthor: "+str(data["list"][0]["author"])
                        y += "\nWord: "+str(data["list"][0]["word"])
                        y += "\nLink: "+str(data["list"][0]["permalink"])
                        y += "\nDefinition: "+str(data["list"][0]["definition"])
                        y += "\nExample: "+str(data["list"][0]["example"])
                        line.sendMessage(to, str(y))
            elif msg.contentType == 7:
                if settings["checkSticker"] == True:
                    stk_id = msg.contentMetadata['STKID']
                    stk_ver = msg.contentMetadata['STKVER']
                    pkg_id = msg.contentMetadata['STKPKGID']
                    ret_ = "‚ïî‚ïê‚ïê[ Sticker Info ]"
                    ret_ += "\n‚ï† STICKER ID : {}".format(stk_id)
                    ret_ += "\n‚ï† STICKER PACKAGES ID : {}".format(pkg_id)
                    ret_ += "\n‚ï† STICKER VERSION : {}".format(stk_ver)
                    ret_ += "\n‚ï† STICKER URL : line://shop/detail/{}".format(pkg_id)
                    ret_ += "\n‚ïö‚ïê‚ïê[ Finish ]"
                    line.sendMessage(to, str(ret_))
              
#==============================================================================#
        if op.type == 19:
          if op.param2 in Family:
            pass
          if op.param2 in RfuBot:
          	pass
          else:
            if op.param3 in lineMID:
              if op.param2 not in Family:
                try:
                  G = ki.getGroup(op.param1)
                  G = kk.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kk.updateGroup(G)
                  ticket = kk.reissueGroupTicket(op.param1)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  line.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1)
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)

            if op.param3 in kiMID:
              if op.param2 not in Family:
                try:
                  G = kk.getGroup(op.param1)
                  G = kc.getGroup(op.param1)
                  kk.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kc.updateGroup(G)
                  ticket = kc.reissueGroupTicket(op.param1)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)                  
                  G.preventedJoinByTicket = True
                  kk.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kk.updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  ki.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                  
            if op.param3 in kkMID:
              if op.param2 not in Family:
                try:
                  G = kc.getGroup(op.param1)
                  G = ki.getGroup(op.param1)
                  kc.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  kc.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  kk.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1)
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                  
            if op.param3 in kcMID:
              if op.param2 not in Family:
                try:
                  G = kk.getGroup(op.param1)
                  G = ke.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  ki.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  kc.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)

            if op.param3 in keMID:
              if op.param2 not in Family:
                try:
                  G = ki.getGroup(op.param1)
                  G = kc.getGroup(op.param1)
                  ki.kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  ki.updateGroup(G)
                  ticket = ki.reissueGroupTicket(op.param1)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  ke.updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)
                except:
                  G = random.choice(Rfu).getGroup(op.param1) 
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                  G.preventedJoinByTicket = False
                  random.choice(Rfu).updateGroup(G)
                  ticket = random.choice(Rfu).reissueGroupTicket(op.param1)
                  ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                  time.sleep(0.01)
                  G.preventedJoinByTicket = True
                  random.choice(Rfu).updateGroup(G)
                  settings["blacklist"][op.param2] = True
                  f=codecs.open('st2__b.json','w','utf-8')
                  json.dump(settings["blacklist"], f, sort_keys=True, indent=4,ensure_ascii=False)                  

        if op.type == 19:
            if lineMID in op.param3:
                settings["blacklist"][op.param2] = True
        if op.type == 22:
            if settings['leaveRoom'] == True:
                line.leaveRoom(op.param1)
                ki.leaveRoom(op.param1)
                kk.leaveRoom(op.param1)
                kc.leaveRoom(op.param1)
                ke.leaveRoom(op.param1)                
        if op.type == 24:
            if settings['leaveRoom'] == True:
                line.leaveRoom(op.param1)
                ki.leaveRoom(op.param1)
                kk.leaveRoom(op.param1)
                kc.leaveRoom(op.param1)
                ke.leaveRoom(op.param1)                
#==============================================================================#
        if op.type == 19:
            try:
                if op.param3 in lineMID:
                    if op.param2 in kiMID:
                        G = ki.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        line.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)                                                
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True                       

                elif op.param3 in kiMID:
                    if op.param2 in lineMID:
                        G = kk.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kk.updateGroup(G)
                    else:
                        G = kk.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True

                elif op.param3 in kkMID:
                    if op.param2 in kiMID:
                        G = ki.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                    else:
                        G = ki.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ki.updateGroup(G)
                        ticket = ki.reissueGroupTicket(op.param1)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        G.preventedJoinByTicket = True
                        ki.updateGroup(G)
                        settings["blacklist"][op.param2] = True

                elif op.param3 in kcMID:
                    if op.param2 in kkMID:
                        G = kk.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kk.updateGroup(G)
                    else:
                        G = kk.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        kk.updateGroup(G)
                        ticket = kk.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kc.updateGroup(G)
                        settings["blacklist"][op.param2] = True
                elif op.param3 in keMID:
                    if op.param2 in kcMID:
                        G = ke.getGroup(op.param1)
                        G.preventedJoinByTicket = False
                        ke.updateGroup(G)
                        ticket = ke.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        kc.updateGroup(G)
                    else:
                        G = ke.getGroup(op.param1)
                        random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                        G.preventedJoinByTicket = False
                        ke.updateGroup(G)
                        ticket = ke.reissueGroupTicket(op.param1)
                        kc.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        line.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ki.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        kk.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)
                        ke.acceptGroupInvitationByTicket(op.param1,format(str(ticket)))
                        time.sleep(0.0001)						
                        G.preventedJoinByTicket = True
                        ke.updateGroup(G)
                        settings["blacklist"][op.param2] = True
            except:
                pass
#==============================================================================#
        if op.type == 17:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
            if RfuProtect["protect"] == True:
                if settings["blacklist"][op.param2] == True:
                    try:
                        line.kickoutFromGroup(op.param1,[op.param2])
                        G = line.getGroup(op.param1)
                        G.preventedJoinByTicket = True
                        line.updateGroup(G)
                    except:
                        try:
                            line.kickoutFromGroup(op.param1,[op.param2])
                            G = line.getGroup(op.param1)
                            G.preventedJoinByTicket = True
                            line.updateGroup(G)
                        except:
                            pass
        if op.type == 19:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["protect"] == True:
                    settings ["blacklist"][op.param2] = True
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                    random.choice(Rfu).inviteIntoGroup(op.param1,[op.param2])

        if op.type == 13:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["inviteprotect"] == True:
                    settings ["blacklist"][op.param2] = True
                    random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                    if op.param2 not in Family:
                        if op.param2 in Family:
                            pass
                        elif RfuProtect["inviteprotect"] == True:
                            settings ["blacklist"][op.param2] = True
                            random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                            random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
                            if op.param2 not in Family:
                                if op.param2 in Family:
                                    pass
                                elif RfuProtect["cancelprotect"] == True:
                                    settings ["blacklist"][op.param2] = True
                                    random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])

        if op.type == 11:
            if op.param2 not in Family:
                if op.param2 in Family:
                    pass
                elif RfuProtect["linkprotect"] == True:
                    settings ["blacklist"][op.param2] = True
                    G = line.getGroup(op.param1)
                    G.preventedJoinByTicket = True
                    line.updateGroup(G)
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])
        if op.type == 5:
            if RfuProtect["autoAdd"] == True:
            	c = Message(to=op.param1, from_=None, text=None, contentType=13)
                c.contentMetadata={'mid':'u39b98d8a2032c9bb289f583811a2b941'}
                line.sendImageWithURL(op.param1,"http://dl.profile.line-cdn.net/0h9lRSzNuMZkNvKkqg8-AZFFNvaC4YBGALF0t9dhh9OHZBTihABk0hcU55bCdEE3UcVhh6dx4jOXdD")
                if (settings["message"] in [""," ","\n",None]):
                    pass
                else:
                    line.sendMessage(op.param1,str(settings["message"]))
                    line.sendMessage(c)
                    ki.sendMessage(op.param1,str(settings["message"]))
                    ki.sendMessage(c)
                    kk.sendMessage(op.param1,str(settings["message"]))
                    kk.sendMessage(c)
                    kc.sendMessage(op.param1,str(settings["message"]))
                    kc.sendMessage(c)
                    ke.sendMessage(op.param1,str(settings["message"]))
                    ke.sendMessage(c)

        if op.type == 11:
            if RfuProtect["linkprotect"] == True:
                if op.param2 not in Family:
                    G = line.getGroup(op.param1)
                    G.preventedJoinByTicket = True
                    random.choice(Rfu).updateGroup(G)
                    random.choice(Rfu).kickoutFromGroup(op.param1,[op.param3])                    

        if op.type == 13:
           if RfuProtect["Protectguest"] == True:
               if op.param2 not in Family:
                  random.choice(Rfu).cancelGroupInvitation(op.param1,[op.param3])
                  random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])

        if op.type == 17:
           if RfuProtect["Protectjoin"] == True:
               if op.param2 not in Family:
                   random.choice(Rfu).kickoutFromGroup(op.param1,[op.param2])

        if op.type == 1:
            if sender in Setmain["foto"]:
                path = line.downloadObjectMsg(msg_id)
                del Setmain["foto"][sender]
                line.updateProfilePicture(path)
                line.sendMessage(to,"Foto berhasil dirubah")

        if op.type == 26:
            msg = op.message
            text = msg.text
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            if msg.toType == 0:
                if sender != line.profile.mid:
                    to = sender
                else:
                    to = receiver
            else:
                to = receiver
                if settings["autoRead"] == True:
                    line.sendChatChecked(to, msg_id)
                    ki.sendChatChecked(to, msg_id)
                    kk.sendChatChecked(to, msg_id)
                    kc.sendChatChecked(to, msg_id)
                    ke.sendChatChecked(to, msg_id)					
                if to in read["readPoint"]:
                    if sender not in read["ROM"][to]:
                        read["ROM"][to][sender] = True
                if sender in settings["mimic"]["target"] and settings["mimic"]["status"] == True and settings["mimic"]["target"][sender] == True:
                    text = msg.text
                    if text is not None:
                        line.sendMessage(msg.to,text)
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys())!= None:
                         if settings['potoMention'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.pictureStatus
                             balas = ["http://dl.profile.line-cdn.net/" + cName]
                             ret_ = random.choice(balas)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention["MENTIONEES"]
                             for mention in mentionees:
                                   if mention["M"] in lineMID:
                                          line.sendImageWithURL(to,ret_)
                                          break  
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys()) != None:
                         if settings['detectMention1'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.displayName
                             balas = ["„Äé Auto Respon„Äè\n " + cName + "\n" + str(settings["tag1"]) , cName + "\n" + str(settings["tag2"]), cName + "\n" + str(settings["tag3"])]
                             ret_ = "" + random.choice(balas)
                             name = re.findall(r'@(\w+)', msg.text)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention['"MENTIONEES"]
                             for mention in mentionees:
                                   if mention["M"] in lineMID:
                                          line.sendMessage(to,ret_)
                                          line.sendMessage(to,str(settings["Respontag"]))
                                          #sendMessageWithMention(to, contact.mid)
                                          line.sendMessage(msg.to, None, contentMetadata={"STKID":"100","STKPKGID":"1","STKVER":"100"}, contentType=7)
                                          break  
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys()) != None:
                         if settings['detectMention2'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.displayName
                             balas = [cName + "\n" + str(settings["tag1"]) , cName + "\n" + str(settings["tag2"]), cName + "\n" + str(settings["tag3"])]
                             balas1 = ["http://dl.profile.line-cdn.net/" + cName]
                             ret_ = random.choice(balas)
#                             image = "http://dl.profile.line-cdn.net/" + contact.pictureStatus
                             name = re.findall(r'@(\w+)', msg.text)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention["MENTIONEES"]
                             for mention in mentionees:
                                   if mention["M"] in lineMID:
                                          line.sendMessage(to,ret_)
                                          line.sendMessage(to,balas1)
                                          line.sendMessage(to,str(settings["Respontag"]))
#                                          line.sendImageWithURL(to,image)
                                          line.sendImageWithURL(to,ret_)
                                          line.sendMessageWithMention(to, contact.mid)
                                          line.sendMessage(msg.to, None, contentMetadata={"STKID":"100","STKPKGID":"1","STKVER":"100"}, contentType=7)
                                          break
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                    if "MENTION" in list(msg.contentMetadata.keys()) != None:
                         if settings['detectMention3'] == True:
                             contact = line.getContact(msg._from)
                             cName = contact.displayName
                             path = line.getProfileCoverURL(ret_)
                             balas = "http://dl.profile.line-cdn.net/" + contact.pictureStatus
                             balas1 = "‡πÅ‡∏ó‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î..‡∏Å‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏™‡πÅ‡∏°‡πà‡∏á‡∏™‡∏≤‡∏™‡∏™ 555+üòÖüòÖüòÖ\n" + contact.statusMessage
                             ret_ = random.choice(balas)
                             image = "http://dl.profile.line-cdn.net/" + contact.pictureStatus                          
                             name = re.findall(r'@(\w+)', msg.text)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention["MENTIONEES"]
                             for mention in mentionees:
                                   if mention["M"] in lineMID:
                                          line.sendMessage(to,ret_)
                                          line.sendMessage(to,balas1)
                                          line.sendMessage(to,str(settings["Respontag"]))
                                          line.sendImageWithURL(to,image)
                                          line.sendImageWithURL(to,ret_)
                                          line.sendImageWithURL(msg.to, str(path))
                                          line.sendMessageWithMention(to, contact.mid)
                                          line.sendMessage(msg.to, None, contentMetadata={"STKID":"100","STKPKGID":"1","STKVER":"100"}, contentType=7)
                                          break
                if msg.contentType == 0 and sender not in lineMID and msg.toType == 2:
                	if "MENTION" in msg.contentMetadata.keys() != None:
                         if settings['kickMention'] == True:
                             contact = line.getContact(msg._from)
                             mention = ast.literal_eval(msg.contentMetadata["MENTION"])
                             mentionees = mention["MENTIONEES"]
                            for mention in mentionees:
                                 if mention["M"] in lineMID:
                                        line.sendText(msg.to,"Don't tag me..üñïüñïüñï")
                                        line.kickoutFromGroup(msg.to,[msg.from_])
                                        break
                if msg.text in ["Me","me",".me",".Me","‡∏Ñ‡∏ó","/me"]:
                     line.sendMessage(msg.to,"BY‚ç£‚å≤„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë")
                 if msg.text in ["Test","Teston","test"]:
                    line.sendMessage(msg.to,"„Äê‚ú•Õ≤·é™·é¨·é∑√üŒòÕ≤ ƒ¶·èå·é™~·é°·éæ·éæŒù~·é°·é™Œù·èÄ‚ú•„Äë")
                #if msg.text in ["runtime","Runtime","/uptime","‡∏≠‡∏≠‡∏ô",".uptime"]:
                #    line.sendText(msg.to,"‡∏à‡∏∞‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏ã‡∏•‡∏ô‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏´‡∏ô")				
                if msg.text in dangerMessage:
                    random.choice(Rfu).kickoutFromGroup(receiver,[sender])
                    random.choice(Rfu).sendMessage(msg.to,"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏•‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (ÔΩÄ„Éªœâ„Éª¬¥)")										
# ----------------- NOTIFED MEMBER JOIN GROUP
       # if op.type == 17:
       #   if settings['Wc'] == True:
       #     if op.param1 in welcome:
       #         if op.param2 in bot1:
       #             return
       #         ginfo = line.getGroup(op.param1)
       #         contact = line.getContact(op.param2).picturePath
       #         image = 'http://dl.profile.line.naver.jp'+contact
       #         line.sendMessage(op.param1,"‡∏Å‡∏£‡∏≤‡∏ö‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ..ü§£ü§£ü§£ " + line.getContact(op.param2).displayName + "\nü§£ü§£..‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‚òû " + str(ginfo.name) + " ‚òú" + "\n!!!..‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏•‡πâ‡∏∞‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏±‡∏ü ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∑‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡∏ã‡∏ô‡∏ô‡∏∞ ^^‚úå‚úå\n##...‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏≤‡∏ñ‡∏ô‡∏≤‡∏î‡∏µ‡∏à‡∏≤‡∏Å...## \n ‚ç£‚å≤‚Ä¢„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë")
       #         line.sendMessage(to,str(settings["welcome"]))
       #         welcomeMembers(op.param1, [op.param2])
       #         line.sendImageWithURL(op.param1, image)


        if op.type == 17:
           print ("MEMBER JOIN TO GROUP")
           if settings["Wc"] == True:
             if op.param2 in lineMID:
                 return
             ginfo = line.getGroup(op.param1)
             contact = line.getContact(op.param2)
             image = "http://dl.profile.line.naver.jp/" + contact.pictureStatus
             line.sendMessage(op.param1,"‡∏Å‡∏£‡∏≤‡∏ö‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ..ü§£ü§£ü§£ " + line.getContact(op.param2).displayName + "\nü§£ü§£..‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‚òû " + str(ginfo.name) + " ‚òú" + "\n!!!..‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏•‡πâ‡∏∞‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏±‡∏ü ‡∏´‡πâ‡∏≤‡∏°‡∏î‡∏∑‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡∏ã‡∏ô‡∏ô‡∏∞ ^^‚úå‚úå\n##...‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏≤‡∏ñ‡∏ô‡∏≤‡∏î‡∏µ‡∏à‡∏≤‡∏Å...## \n ‚ç£‚å≤‚Ä¢„Äê‚ú•≈¶‚Ç¨‚Ç≥‚Ñ≥‡¶ß‡Ø´‡∏ø‚ùÇ≈¶üîù“®‡∏±’Å‡®ô‡∏∏–Æ‚Ñì‚Ñì‰∏Ç·É°‚ú•„Äë")
             line.sendMessage(to,str(settings["welcome"]))
             line.sendImageWithURL(op.param1,image)

# ----------------- NOTIFED MEMBER OUT GROUP
        if op.type == 15:
          if settings['Lv'] == True:
            if op.param2 in lineMID:
                 return
             ginfo = line.getGroup(op.param1)
             contact = line.getContact(op.param2)
             image = "http://dl.profile.line.naver.jp/" + contact.pictureStatus
             line.sendMessage(op.param1,"‡∏≠‡πâ‡∏≤‡∏ß‡∏ß‡∏ß‡∏ß....üò≠üò≠üò≠ " + line.getContact(op.param2).displayName + "\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏≠‡πÑ‡∏õ‡∏î‡∏µ..‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç.. \n ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏≠‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Ç..‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏µ..(p‚Ä≤Ô∏µ‚Äµ„ÄÇ)")
             line.sendMessage(op.param1,str(settings["bye"]))
             line.sendImageWithURL(op.param1,image)
# ----------------- NOTIFED MEMBER JOIN GROUP
        if op.type == 55:
            try:
                if RfuCctv['cyduk'][op.param1]==True:
                    if op.param1 in RfuCctv['point']:
                        Name = line.getContact(op.param2).displayName
                        if Name in RfuCctv['sidermem'][op.param1]:
                            pass
                        else:
                            RfuCctv['sidermem'][op.param1] += "\nüî∞" + Name
                            pref=['eh ada','hai kak','hay kamu','nah ada','halo lg ngapain','halo','sini kak','cctv yah kak']
                            line.sendMessage(op.param1, str(random.choice(pref))+' '+Name)
                    else:
                        pass
                else:
                    pass
            except:
                pass

        if op.type == 55:
            try:
                if RfuCctv['cyduk'][op.param1]==True:
                    if op.param1 in RfuCctv['point']:
                        Name = line.getContact(op.param2).displayName
                        if Name in RfuCctv['sidermem'][op.param1]:
                            pass
                        else:
                            RfuCctv['sidermem'][op.param1] += "\n‚å¨ " + Name + "\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚îõ"
                            if " " in Name:
                            	nick = Name.split(' ')
                            if len(nick) == 2:
                            	line.sendMessage(op.param1, "Nah " +nick[0])
                            summon(op.param1, [op.param2])
                    else:
                        pass
                else:
                    pass
            except:
                pass
        if op.type == 55:
            print ("[ 55 ] ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")
            try:
                if op.param1 in read['readPoint']:
                    if op.param2 in read['readMember'][op.param1]:
                        pass
                    else:
                        read['readMember'][op.param1] += op.param2
                    read['ROM'][op.param1][op.param2] = op.param2
                    backupData()
                else:
                   pass
            except:
                pass
    except Exception as error:
        logError(error)
#==============================================================================#
while True:
    try:
        ops = oepoll.singleTrace(count=50)
        if ops is not None:
            for op in ops:
                lineBot(op)
                oepoll.setRevision(op.revision)
    except Exception as e:
        logError(e)
